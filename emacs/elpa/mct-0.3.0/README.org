#+title: Minibuffer and Completions in Tandem (mct.el)
#+author: Protesilaos Stavrou
#+email: info@protesilaos.com
#+language: en
#+options: ':t toc:nil author:t email:t num:t
#+startup: content

#+macro: stable-version 0.3.0
#+macro: release-date 2021-11-19
#+macro: development-version 0.4.0-dev
#+macro: file @@texinfo:@file{@@$1@@texinfo:}@@
#+macro: space @@texinfo:@: @@
#+macro: kbd @@texinfo:@kbd{@@$1@@texinfo:}@@

#+export_file_name: mct.texi

#+texinfo_filename: mct.info
#+texinfo_dir_category: Emacs misc features
#+texinfo_dir_title: MCT: (mct)
#+texinfo_dir_desc: Enhancement of the default minibuffer completion
#+texinfo_header: @set MAINTAINERSITE @uref{https://protesilaos.com,maintainer webpage}
#+texinfo_header: @set MAINTAINER Protesilaos Stavrou
#+texinfo_header: @set MAINTAINEREMAIL @email{info@protesilaos.com}
#+texinfo_header: @set MAINTAINERCONTACT @uref{mailto:info@protesilaos.com,contact the maintainer}

#+texinfo: @insertcopying

This manual, written by Protesilaos Stavrou, describes the customization
options for =mct.el=, and provides every other piece of information
pertinent to it.

The documentation furnished herein corresponds to stable version
{{{stable-version}}}, released on {{{release-date}}}.  Any reference to a newer
feature which does not yet form part of the latest tagged commit, is
explicitly marked as such.

Current development target is {{{development-version}}}.

#+toc: headlines 8 insert TOC here, with eight headline levels

* COPYING
:PROPERTIES:
:COPYING: t
:CUSTOM_ID: h:efc32d6b-9405-4f3c-9560-3229b3ce3866
:END:

Copyright (C) 2021  Free Software Foundation, Inc.

#+begin_quote
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with no
Invariant Sections, with the Front-Cover Texts being “A GNU Manual,” and
with the Back-Cover Texts as in (a) below.  A copy of the license is
included in the section entitled “GNU Free Documentation License.”

(a) The FSF’s Back-Cover Text is: “You have the freedom to copy and
modify this GNU manual.”
#+end_quote

* Overview of MCT
:PROPERTIES:
:CUSTOM_ID: h:ba224631-618c-4e52-b373-e46970cb2242
:END:
#+cindex: Overview of features

Minibuffer and Completions in Tandem, also known as "MCT", "Mct", =mct=,
or =mct.el=, is a package that enhances the default minibuffer and
=*Completions*= buffer of Emacs 27 (or higher) so that they work together
as part of a unified framework.  The idea is to make the presentation
and overall functionality be consistent with other popular, vertically
aligned completion UIs while leveraging built-in functionality.

The main feature set that unifies the minibuffer and the =*Completions*=
buffer consists of commands that cycle between the two, making it seem
like they are part of a contiguous space ([[#h:884d6702-8666-4d89-87a2-7d74843653f3][Basic usage]]).

MCT tries to find a middle ground between the frugal defaults and the
more opinionated completion UIs.  This is most evident in its approach
on how to present completion candidates.  Instead of showing them
outright or only displaying them on demand, MCT implements a minimum
input threshold as well as a slight delay before it pops up the
=*Completions*= buffer and starts updating it to respond to user input.

#+vindex: mct-minimum-input
#+vindex: mct-live-update-delay
Customisation options control the input threshold (~mct-minimum-input~)
and the delay between live updates (~mct-live-update-delay~).  Similarly,
a blocklist and a passlist for commands are on offer:

  #+vindex: mct-completion-blocklist
+ The blocklist (~mct-completion-blocklist~) disables the live-updating
  functionality for the functions specified therein.

  #+vindex: mct-completion-passlist
+ The passlist (~mct-completion-passlist~) always shows the Completions'
  buffer for the designated function without accounting for the minimum
  input threshold.

#+vindex: mct-live-completion
The user option ~mct-live-completion~ controls the overall behaviour of
the Completions' buffer:

+ When nil, the user has to manually request completions, using the
  regular activating commands.  The Completions' buffer is never updated
  live to match user input.  Updating has to be handled manually.  This
  is like the out-of-the-box minibuffer completion experience.

+ When set to the value =visible=, the Completions' buffer is live
  updated only if it is visible.  The actual display of the completions
  is still handled manually.  For this reason, the =visible= style does
  not read the ~mct-minimum-input~, meaning that it will always try to
  live update the visible completions, regardless of input length.

+ When non-nil (the default), the Completions' buffer is automatically
  displayed once the ~mct-minimum-input~ is met and is hidden once the
  input drops below that threshold.  While visible, the buffer is
  updated live to match the user input.

+ Note that every function in the ~mct-completion-passlist~ ignores this
  option altogether.  This means that every such command will always
  show the Completions' buffer automatically and will always update its
  contents live.  Same principle for every function declared in the
  ~mct-completion-blocklist~, which will always disable both the automatic
  display and live updating of the Completions' buffer.

Other customisations:

  #+vindex: mct-hide-completion-mode-line
+ ~mct-hide-completion-mode-line~ to hide the mode line of the
  =*Completions*= buffer.  This removes the separation between it and the
  minibuffer, further contributing to the idea of a unified space
  between the two.

  #+vindex: mct-remove-shadowed-file-name
+ ~mct-remove-shadowed-file-name~ to clear shadowed file names when
  ~file-name-shadow-mode~ is enabled.  This means that in prompts that use
  file paths (such as ~find-file~) when you start in, say, =~/Git/mct.el=
  and type =~/= the previous file path is removed and only the new one is
  inserted.  Whereas the default is to keep the original file name
  visible yet "shadowed" by a different colour.

  #+findex: mct-choose-completion-number
+ ~mct-show-completion-line-numbers~ to always display line numbers in the
  Completions' buffer.  This can be helpful to get a sense of the length
  of the completion candidates' list.  Though note that line numbers are
  displayed ephemerally while using the ~mct-choose-completion-number~
  command, which is bound to =M-g M-g= in either the minibuffer or the
  =*Completions*= buffer.

  #+vindex: mct-apply-completion-stripes
  #+vindex: mct-stripe
+ ~mct-apply-completion-stripes~ applies alternative background colours in
  the Completions' buffer.  This is only tested with the =modus-themes=
  and will only work nicely if the main background is pure black or
  white---other themes would need to add support for the faces we define
  or, at least, users must modify the ~mct-stripe~ face.

* Usage
:PROPERTIES:
:CUSTOM_ID: h:884d6702-8666-4d89-87a2-7d74843653f3
:END:

** Cyclic behaviour
:PROPERTIES:
:CUSTOM_ID: h:68c61a76-1d64-4f62-a77a-52e7b66a68fe
:END:
#+cindex: Cyclic behaviour

When ~mct-mode~ is enabled, some new keymaps are activated which add
commands for cycling between the minibuffer and the completions.
Suppose the following standard layout:

#+begin_example
-----------------
|               |
|               |
|               |
|  Buffer       |
|               |
|               |
|               |
-----------------
-----------------
|               |
|  Completions  |
|               |
-----------------
-----------------
|  Minibuffer   |
-----------------
#+end_example

#+findex: mct-switch-to-completions-top
#+findex: mct-switch-to-completions-bottom
When inside the minibuffer, pressing =C-n= (or down arrow) takes you to
the top of the completions, while =C-p= (or up arrow) moves to the bottom.
The commands are ~mct-switch-to-completions-top~ for the former and
~mct-switch-to-completions-bottom~ for the latter.  If the =*Completions*=
are not shown, then the buffer pops up automatically and point moves to
the given position.

#+findex: mct-previous-completion-or-mini
#+findex: mct-next-completion-or-mini
Similarly, while inside the =*Completions*= buffer, =C-p= (or up arrow) at
the top of the buffer switches to the minibuffer, while =C-n= (or down
arrow) at the bottom of the buffer also goes to the minibuffer.  If
point is anywhere else inside the buffer, those key bindings perform a
regular line motion.  The commands are ~mct-previous-completion-or-mini~
and ~mct-next-completion-or-mini~.  Both accept an optional numeric
argument.  If the Nth line lies outside the boundaries of the
completions' buffer, they move the point to the minibuffer.

#+findex: mct-list-completions-toggle
The display of the =*Completions*= can be toggled at any time from inside
the minibuffer with =C-l= (mnemonic is "[l]ist completions" and the
command is ~mct-list-completions-toggle~).

#+vindex: mct-display-buffer-action
By default, the =*Completions*= buffer appears in a window at the bottom
of the frame.  Users can change its placement by configuring the
variable ~mct-display-buffer-action~ (its doc string explains how and
provides sample code).

** Selecting candidates
:PROPERTIES:
:CUSTOM_ID: h:bb445062-2e39-4082-a868-2123bfb793cc
:END:
#+cindex: Candidate selection

There are several ways to select a completion candidate.

1. Suppose that you are typing =mod= with the intent to select the
   =modus-themes.el= buffer.  To force complete the first candidate follow
   up =mod= with the =TAB= key (~minibuffer-force-complete~).  This does not
   exit the minibuffer, meaning that it does not confirm your choice.
   It just expands your input to the first likely candidate.  To confirm
   your choice, use =RET=.  If done fast enough, no completions will be
   shown (depending on your minimum input threshold and the live-update
   delay).  If you made a mistake, just use ~undo~.  If the candidates
   meet the ~completion-cycle-threshold~ hit =TAB= again to switch between
   them.

   #+findex: mct-choose-completion-exit
2. While cycling through the completions' buffer, type =RET= to select and
   confirm the current candidate (~mct-choose-completion-exit~).  This
   works for all types of completion prompts.

   #+findex: mct-choose-completion-no-exit
3. Similar to the above, but without exiting the minibuffer (i.e. to
   confirm your choice) is ~mct-choose-completion-no-exit~ which is bound
   to =TAB= in the completions' buffer.  This is particularly useful for
   certain contexts where selecting a candidate does not necessarily
   mean that the process has to be finalised (e.g. when using
   ~find-file~).  In those cases, the event triggered by =TAB= is followed
   by the renewal of the list of completions, where relevant (e.g. =TAB=
   over a directory in ~find-file~, which then shows the contents of that
   directory).

   The command can correctly expand completion candidates even when the
   active style in ~completion-styles~ is =partial-completion=.  In other
   words, if the minibuffer contains input like =~/G/P/m= and the point is
   in the completions' buffer over =Git/Projects/mct/= the minibuffer'
   contents will become =~/Git/Projects/mct/= and then show the contents
   of that directory.

   #+findex: mct-edit-completion
4. Type =M-e= (~mct-edit-completion~) in the completions' buffer to place
   the current candidate in the minibuffer, without exiting the session.
   This allows you to edit the text before confirming it.  If point is
   in the minibuffer before performing this action, the current
   candidate is either the one at the top of the completions' buffer or
   that which is under the last known point in said buffer (the last
   known position is reset when the window is deleted).  Internally,
   ~mct-edit-completion~ uses ~mct-choose-completion-no-exit~ to expand the
   completion candidate, so it retains its behaviour (as explained right
   above).

   #+findex: mct-choose-completion-number
5. Select a candidate by its line number by typing =M-g M-g= in either the
   minibuffer or the =*Completions*= buffer.  This calls the command
   ~mct-choose-completion-number~ which internally enables line numbers
   and always makes the completions' buffer visible.  Selection in this
   way exits the minibuffer.

   #+vindex: mct-completions-format
   NOTE: This method only works when ~mct-completions-format~ is set to
   its default value of =one-column=.  The other formats show completions
   in a grid view, which makes navigation based on line numbers
   imprecise.

   #+findex: mct-choose-completion-dwim
6. In prompts that allow the selection of multiple candidates
   (internally via the ~completing-read-multiple~ function) a =[CRM]= label
   is added to the text of the prompt.  The user thus knows that
   pressing =M-RET= (~mct-choose-completion-dwim~) in the =*Completions*= will
   append the candidate at point to the list of selections and keep the
   completions available so that another item may be selected.  Any of
   the aforementioned applicable methods can confirm the final
   selection.  If, say, you want to pick a total of three candidates, do
   =M-RET= for the first two and =RET= (~mct-choose-completion-exit~) for the
   last one.  In contexts that are not CRM-powered, the =M-RET= has the
   same effect as =TAB= (~mct-choose-completion-no-exit~).

   #+findex: mct-complete-and-exit
7. When point is at the minibuffer, select the current candidate in
   the completions buffer with =C-RET= (~mct-complete-and-exit~), which
   has the same effect as first completing with =TAB= and then
   immediately exit the minibuffer with the completed candidate as the
   selected one.

** Other commands
:PROPERTIES:
:CUSTOM_ID: h:b46a3366-6a7a-49ed-8caa-693d6ee437e9
:END:
#+cindex: Miscellaneous commands

  #+findex: mct-next-completion-group
  #+findex: mct-previous-completion-group
+ Emacs 28 has the ability to group candidates inside the completions'
  buffer under headings.  For example, the Consult package makes good
  use of those ([[#h:03227254-d467-4147-b8cf-2fe05a2e279b][Extensions]]).  MCT provides motions that jump between
  such headings, placing the point at the first candidate right below
  the heading's text.  Use =M-n= (~mct-next-completion-group~) and =M-p=
  (~mct-previous-completion-group~) to move to the next or previous one,
  respectively.  Both commands accept an optional numeric argument.  For
  the sake of avoiding surprises, these commands do not cycle between
  the completions and the minibuffer: they stop at the first or last
  heading.

  #+findex: mct-backward-updir
+ When using completion categories that involve file paths, such as
  ~find-file~, the backspace key (=DEL=) goes up a directory if point is
  right after a path's directory delimiter (a forward slash).  Otherwise
  it deletes a single character backwards.  The command's symbol is
  ~mct-backward-updir~.

* Installation
:PROPERTIES:
:CUSTOM_ID: h:1b501ed4-f16c-4118-9a4a-7a5e29143077
:END:

** Install the package
:PROPERTIES:
:CUSTOM_ID: h:a191dbaa-22f6-4ad6-8185-1de64fe0a9bc
:END:

=mct= is available on the official GNU ELPA archive for users of Emacs
version 27 or higher.  One can install the package without any further
configuration.  The following commands shall suffice:

#+begin_src emacs-lisp
M-x package-refresh-contents
M-x package-install RET mct
#+end_src

** Manual installation method
:PROPERTIES:
:CUSTOM_ID: h:663ec536-056b-443e-9272-2a365eb28b83
:END:

Assuming your Emacs files are found in =~/.emacs.d/=, execute the
following commands in a shell prompt:

#+begin_src sh
cd ~/.emacs.d

# Create a directory for manually-installed packages
mkdir manual-packages

# Go to the new directory
cd manual-packages

# Clone this repo and name it "mct"
git clone https://gitlab.com/protesilaos/mct.git mct
#+end_src

Finally, in your =init.el= (or equivalent) evaluate this:

#+begin_src emacs-lisp
;; Make Elisp files in that directory available to the user.
(add-to-list 'load-path "~/.emacs.d/manual-packages/mct")
#+end_src

Everything is in place to set up the package.

* Sample setup
:PROPERTIES:
:CUSTOM_ID: h:318ba6f8-2909-44b0-9bed-558552722667
:END:
#+cindex: Sample configuration

Minimal setup:

#+begin_src emacs-lisp
(require 'mct)
(mct-mode 1)
#+end_src

And with more options:

#+begin_src emacs-lisp
(require 'mct)

(setq mct-remove-shadowed-file-names t) ; works when `file-name-shadow-mode' is enabled
(setq mct-hide-completion-mode-line t)
(setq mct-show-completion-line-numbers nil)
(setq mct-apply-completion-stripes t)
(setq mct-minimum-input 3)
(setq mct-live-update-delay 0.6)

;; NOTE: setting this variable with `setq', requires `mct-mode' to be
;; reloaded.
(setq mct-completions-format 'one-column)

;; NOTE: `mct-completion-blocklist' can be used for commands with lots
;; of candidates, depending also on how low `mct-minimum-input' is.
;; With the settings shown here this is not required, otherwise I would
;; use something like this:
;;
;; (setq mct-completion-blocklist
;;       '( describe-symbol describe-function describe-variable
;;          execute-extended-command insert-char))
(setq mct-completion-blocklist nil)

;; This is for commands that should always pop up the completions'
;; buffer.  It circumvents the default method of waiting for some user
;; input (see `mct-minimum-input') before displaying and updating the
;; completions' buffer.
(setq mct-completion-passlist
      '(imenu
        Info-goto-node
        Info-index
        Info-menu
        vc-retrieve-tag))

;; You can place the Completions' buffer wherever you want, by following
;; the syntax of `display-buffer'.  For example, try this:

;; (setq mct-display-buffer-action
;;       (quote ((display-buffer-reuse-window
;;                display-buffer-in-side-window)
;;               (side . left)
;;               (slot . 99)
;;               (window-width . 0.3))))

(mct-mode 1)
#+end_src

Other useful extras from the Emacs source code (read their doc strings):

#+begin_src emacs-lisp
(setq completion-styles
      '(basic substring initials flex partial-completion))
(setq completion-category-overrides
      '((file (styles . (basic partial-completion initials substring)))))

(setq completion-cycle-threshold 2)
(setq completion-ignore-case t)
(setq completion-show-inline-help nil)

(setq completions-detailed t)

(setq enable-recursive-minibuffers t)
(setq minibuffer-eldef-shorten-default t)

(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)

(setq resize-mini-windows t)
(setq minibuffer-eldef-shorten-default t)

(file-name-shadow-mode 1)
(minibuffer-depth-indicate-mode 1)
(minibuffer-electric-default-mode 1)

;; Do not allow the cursor in the minibuffer prompt
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))

(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

;;; Minibuffer history
(require 'savehist)
(setq savehist-file (locate-user-emacs-file "savehist"))
(setq history-length 10000)
(setq history-delete-duplicates t)
(setq savehist-save-minibuffer-history t)
(add-hook 'after-init-hook #'savehist-mode)

;;; Extensions

;;;; Enable Consult previews in the Completions buffer.
;; Requires the Consult package.
(add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)

;;;; Setup for Orderless
;; Requires the Orderless package

;; We make the SPC key insert a literal space and the same for the
;; question mark.  Spaces are used to delimit orderless groups, while
;; the quedtion mark is a valid regexp character.
(let ((map minibuffer-local-completion-map))
  (define-key map (kbd "SPC") nil)
  (define-key map (kbd "?") nil))

;; Because SPC works for Orderless and is trivial to activate, I like to
;; put `orderless' at the end of my `completion-styles'.  Like this:
(setq completion-styles
      '(basic substring initials flex partial-completion orderless))
(setq completion-category-overrides
      '((file (styles . (basic partial-completion orderless)))))
#+end_src

* Keymaps
:PROPERTIES:
:CUSTOM_ID: h:b3178edd-f340-444c-8426-fe84f23ac9ea
:END:
#+cindex: Keymaps
#+vindex: mct-completion-list-mode-map
#+vindex: mct-minibuffer-local-completion-map
#+vindex: mct-minibuffer-local-filename-completion-map

MCT defines its own keymaps, which extend those that are active in the
minibuffer and the =*Completions*= buffer, respectively:

+ ~mct-completion-list-mode-map~
+ ~mct-minibuffer-local-completion-map~
+ ~mct-minibuffer-local-filename-completion-map~

You can invoke ~describe-keymap~ to learn more about them.

If you want to edit any key bindings, do it in these keymaps, not in
those they extend and override (the names of the original ones are the
same as above, minus the =mct-= prefix).

* Extensions
:PROPERTIES:
:CUSTOM_ID: h:03227254-d467-4147-b8cf-2fe05a2e279b
:END:
#+cindex: Extra packages

MCT only tweaks the default minibuffer.  To get more out of it, consider
these exceptionally well-crafted extras:

+ [[https://github.com/minad/consult/][Consult]] by Daniel Mendler :: Adds several commands that make
  interacting with the minibuffer more powerful.  There also are
  multiple packages that build on it, such as [[https://github.com/karthink/consult-dir][consult-dir]] by Karthik
  Chikmagalur and [[https://codeberg.org/jao/consult-notmuch][consult-notmuch]] by José Antonio Ortega Ruiz.

+ [[https://github.com/oantolin/embark/][Embark]] by Omar Antolín Camarena :: Provides configurable contextual
  actions for completions and many other constructs inside buffers.  A
  genius package!

+ [[https://github.com/minad/marginalia][Marginalia]] by Daniel and Omar :: Displays informative annotations for
  all known types of completion candidates.

+ [[https://github.com/oantolin/orderless/][Orderless]] by Omar :: A completion style that matches a variety of
  patterns (regexp, flex, initialism, etc.) regardless of the order they
  appear in.

** Enable Consult previews
:PROPERTIES:
:CUSTOM_ID: h:85268cb1-9d49-452c-ba5f-c9215d4b8b62
:END:

One of the nice features of the Consult package is the ability to
preview the candidate at point.  All we need to enable it in the
=*Completions*= buffer is the following snippet:

#+begin_src emacs-lisp
(add-hook 'completion-list-mode-hook #'consult-preview-at-point-mode)
#+end_src

* Alternatives
:PROPERTIES:
:CUSTOM_ID: h:c9ddedea-e279-4233-94dc-f8d32367a954
:END:
#+cindex: Alternatives to MCT

Like MCT, these alternatives provide a thin layer of functionality over
the built-in infrastructure.  They all make for a natural complement to
the standard Emacs experience (also [[#h:03227254-d467-4147-b8cf-2fe05a2e279b][Extensions]]).

+ [[https://github.com/minad/vertico][Vertico]] by Daniel Mendler :: this is a more mature and feature-rich
  package with a large user base and a highly competent maintainer.

  Vertico has some performance optimisations on how candidates are
  sorted and presented, which means that it displays results right away
  without any noticeable performance penalty.  Whereas MCT does not
  change the underlying behaviour of how candidates are displayed.  As
  such, MCT will be slower in scenaria where there are lots of
  candidates because core Emacs lacks those optimisations.  One such
  case is with the ~describe-symbol~ (=C-h o=) prompt.  If the user asks for
  the completions' buffer without inputting any character (so without
  narrowing the list), there will be a noticeable delay before the
  buffer is rendered.  This is mitigated in MCT by the requirement for
  ~mct-minimum-input~, though the underlying mechanics remain in tact.

  In terms of the interaction model, the main difference between Vertico
  and MCT is that the former uses the minibuffer by default and shows
  the completions there.  The minibuffer is expanded to show the
  candidates in a vertical list.  Whereas MCT keeps the =*Completions*=
  buffer and the minibuffer as separate entities, the way standard Emacs
  does it.

  The presence of a fully fledged buffer means that the user can invoke
  all relevant commands at their disposal, such as to write the buffer
  to a file for future review, use Isearch to move around, copy a string
  or rectangle to a register, and so on.  Also, the placement of such a
  buffer is configurable (as with all buffers---though refer, in
  particular, to ~mct-display-buffer-action~).

  Vertico also supports buffer display, though only for the placement of
  the buffer.  There is an extension for that in the git repository
  called =vertico-buffer.el=.  Note, however, that the common combination
  of Vertico and Embark means that users can always place the list of
  completion candidates in a standalone buffer by means of Embark's
  collect/export facilities.

+ [[https://github.com/karthink/elmo][Elmo - Embark Live MOde for Emacs]] by Karthik Chikmagalur :: this
  package is best described as a sibling of MCT both in terms of its
  functionality and overall interaction model.  In fact, the cyclic
  motions that are at the core of the MCT experience were first
  developed as part of my personal Emacs setup to cycle between the
  minibuffer and Embark's "live completions" buffer.  That was until
  Emacs28 got some refinements to the presentation of the =*Completions*=
  buffer which allowed for a vertical, single-column view.

  Elmo can, in principle, have identical functionality with MCT, given
  that the only substantive difference is that the former uses an Embark
  buffer to show live-updating completions, while the latter relies on
  the generic =*Completions*= buffer.

  For users who are on Emacs 27 and who need a single-column view, Elmo
  is a better choice because MCT can only display such a view on Emacs
  28 or higher (though it has been meticulously tested with the grid
  views of Emacs 27 and should work perfectly fine with them).

+ Icomplete and fido-mode (built-in, multiple authors) :: Icomplete is
  closer in spirit to Vertico, as it too uses the minibuffer to display
  completion candidates.  By default, it presents the list horizontally,
  though there exists ~icomplete-vertical-mode~ (and ~fido-vertical-mode~).

  For our purposes, Icomplete and Fido are the same in terms of the
  paradigm they follow.  The latter is a re-spin of the former, as it
  adjusts certain variables and binds some commands for the convenience
  of the end-user.  ~fido-mode~ and its accoutrements are defined in
  =icomplete.el=.

  What MCT borrows from Icomplete is the ~mct-backward-updir~ command, the
  tidying of the shadowed file paths, and ideas for the input delay
  (explained elsewhere in this document).  Internally, I also learnt how
  to extend local keymaps by studying =icomplete.el=.

  I had used Icomplete for several months before moving to what now has
  become =mct.el=.  I think it is excellent at providing a thin layer over
  the built-in infrastructure.

* Acknowledgements
:PROPERTIES:
:CUSTOM_ID: h:e2f73255-55f1-4f4c-8d8b-99c9a4a83192
:END:
#+cindex: Contributors

MCT is meant to be a collective effort.  Every bit of help matters.

+ Author/maintainer :: Protesilaos Stavrou.

+ Contributions to code or documentation :: James Norman Vladimir Cash,
  José Antonio Ortega Ruiz, Philip Kaludercic.

+ Ideas and user feedback :: Case Duckworth, Jonathan Irving, José
  Antonio Ortega Ruiz, Kostadin Ninev, Manuel Uberti, Philip Kaludercic,
  Theodor Thornhill.

+ Inspiration for certain features :: =icomplete.el= (built-in---multiple
  authors), Daniel Mendler (=vertico=), Omar Antolín Camarena (=embark=,
  =live-completions=), Štěpán Němec (=stripes.el=).

* Official sources
:PROPERTIES:
:CUSTOM_ID: h:32f474f2-f596-4a7e-a0da-023344136be1
:END:

+ Manual :: <https://protesilaos.com/emacs/mct>
+ Change log :: <https://protesilaos.com/emacs/mct-changelog>
+ Source code :: <https://gitlab.com/protesilaos/mct>

* GNU Free Documentation License
:PROPERTIES:
:APPENDIX: t
:CUSTOM_ID: h:2d84e73e-c143-43b5-b388-a6765da974ea
:END:

#+texinfo: @include doclicense.texi

#+begin_export html
<pre>

                GNU Free Documentation License
                 Version 1.3, 3 November 2008


 Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <https://fsf.org/>
 Everyone is permitted to copy and distribute verbatim copies
 of this license document, but changing it is not allowed.

0. PREAMBLE

The purpose of this License is to make a manual, textbook, or other
functional and useful document "free" in the sense of freedom: to
assure everyone the effective freedom to copy and redistribute it,
with or without modifying it, either commercially or noncommercially.
Secondarily, this License preserves for the author and publisher a way
to get credit for their work, while not being considered responsible
for modifications made by others.

This License is a kind of "copyleft", which means that derivative
works of the document must themselves be free in the same sense.  It
complements the GNU General Public License, which is a copyleft
license designed for free software.

We have designed this License in order to use it for manuals for free
software, because free software needs free documentation: a free
program should come with manuals providing the same freedoms that the
software does.  But this License is not limited to software manuals;
it can be used for any textual work, regardless of subject matter or
whether it is published as a printed book.  We recommend this License
principally for works whose purpose is instruction or reference.


1. APPLICABILITY AND DEFINITIONS

This License applies to any manual or other work, in any medium, that
contains a notice placed by the copyright holder saying it can be
distributed under the terms of this License.  Such a notice grants a
world-wide, royalty-free license, unlimited in duration, to use that
work under the conditions stated herein.  The "Document", below,
refers to any such manual or work.  Any member of the public is a
licensee, and is addressed as "you".  You accept the license if you
copy, modify or distribute the work in a way requiring permission
under copyright law.

A "Modified Version" of the Document means any work containing the
Document or a portion of it, either copied verbatim, or with
modifications and/or translated into another language.

A "Secondary Section" is a named appendix or a front-matter section of
the Document that deals exclusively with the relationship of the
publishers or authors of the Document to the Document's overall
subject (or to related matters) and contains nothing that could fall
directly within that overall subject.  (Thus, if the Document is in
part a textbook of mathematics, a Secondary Section may not explain
any mathematics.)  The relationship could be a matter of historical
connection with the subject or with related matters, or of legal,
commercial, philosophical, ethical or political position regarding
them.

The "Invariant Sections" are certain Secondary Sections whose titles
are designated, as being those of Invariant Sections, in the notice
that says that the Document is released under this License.  If a
section does not fit the above definition of Secondary then it is not
allowed to be designated as Invariant.  The Document may contain zero
Invariant Sections.  If the Document does not identify any Invariant
Sections then there are none.

The "Cover Texts" are certain short passages of text that are listed,
as Front-Cover Texts or Back-Cover Texts, in the notice that says that
the Document is released under this License.  A Front-Cover Text may
be at most 5 words, and a Back-Cover Text may be at most 25 words.

A "Transparent" copy of the Document means a machine-readable copy,
represented in a format whose specification is available to the
general public, that is suitable for revising the document
straightforwardly with generic text editors or (for images composed of
pixels) generic paint programs or (for drawings) some widely available
drawing editor, and that is suitable for input to text formatters or
for automatic translation to a variety of formats suitable for input
to text formatters.  A copy made in an otherwise Transparent file
format whose markup, or absence of markup, has been arranged to thwart
or discourage subsequent modification by readers is not Transparent.
An image format is not Transparent if used for any substantial amount
of text.  A copy that is not "Transparent" is called "Opaque".

Examples of suitable formats for Transparent copies include plain
ASCII without markup, Texinfo input format, LaTeX input format, SGML
or XML using a publicly available DTD, and standard-conforming simple
HTML, PostScript or PDF designed for human modification.  Examples of
transparent image formats include PNG, XCF and JPG.  Opaque formats
include proprietary formats that can be read and edited only by
proprietary word processors, SGML or XML for which the DTD and/or
processing tools are not generally available, and the
machine-generated HTML, PostScript or PDF produced by some word
processors for output purposes only.

The "Title Page" means, for a printed book, the title page itself,
plus such following pages as are needed to hold, legibly, the material
this License requires to appear in the title page.  For works in
formats which do not have any title page as such, "Title Page" means
the text near the most prominent appearance of the work's title,
preceding the beginning of the body of the text.

The "publisher" means any person or entity that distributes copies of
the Document to the public.

A section "Entitled XYZ" means a named subunit of the Document whose
title either is precisely XYZ or contains XYZ in parentheses following
text that translates XYZ in another language.  (Here XYZ stands for a
specific section name mentioned below, such as "Acknowledgements",
"Dedications", "Endorsements", or "History".)  To "Preserve the Title"
of such a section when you modify the Document means that it remains a
section "Entitled XYZ" according to this definition.

The Document may include Warranty Disclaimers next to the notice which
states that this License applies to the Document.  These Warranty
Disclaimers are considered to be included by reference in this
License, but only as regards disclaiming warranties: any other
implication that these Warranty Disclaimers may have is void and has
no effect on the meaning of this License.

2. VERBATIM COPYING

You may copy and distribute the Document in any medium, either
commercially or noncommercially, provided that this License, the
copyright notices, and the license notice saying this License applies
to the Document are reproduced in all copies, and that you add no
other conditions whatsoever to those of this License.  You may not use
technical measures to obstruct or control the reading or further
copying of the copies you make or distribute.  However, you may accept
compensation in exchange for copies.  If you distribute a large enough
number of copies you must also follow the conditions in section 3.

You may also lend copies, under the same conditions stated above, and
you may publicly display copies.


3. COPYING IN QUANTITY

If you publish printed copies (or copies in media that commonly have
printed covers) of the Document, numbering more than 100, and the
Document's license notice requires Cover Texts, you must enclose the
copies in covers that carry, clearly and legibly, all these Cover
Texts: Front-Cover Texts on the front cover, and Back-Cover Texts on
the back cover.  Both covers must also clearly and legibly identify
you as the publisher of these copies.  The front cover must present
the full title with all words of the title equally prominent and
visible.  You may add other material on the covers in addition.
Copying with changes limited to the covers, as long as they preserve
the title of the Document and satisfy these conditions, can be treated
as verbatim copying in other respects.

If the required texts for either cover are too voluminous to fit
legibly, you should put the first ones listed (as many as fit
reasonably) on the actual cover, and continue the rest onto adjacent
pages.

If you publish or distribute Opaque copies of the Document numbering
more than 100, you must either include a machine-readable Transparent
copy along with each Opaque copy, or state in or with each Opaque copy
a computer-network location from which the general network-using
public has access to download using public-standard network protocols
a complete Transparent copy of the Document, free of added material.
If you use the latter option, you must take reasonably prudent steps,
when you begin distribution of Opaque copies in quantity, to ensure
that this Transparent copy will remain thus accessible at the stated
location until at least one year after the last time you distribute an
Opaque copy (directly or through your agents or retailers) of that
edition to the public.

It is requested, but not required, that you contact the authors of the
Document well before redistributing any large number of copies, to
give them a chance to provide you with an updated version of the
Document.


4. MODIFICATIONS

You may copy and distribute a Modified Version of the Document under
the conditions of sections 2 and 3 above, provided that you release
the Modified Version under precisely this License, with the Modified
Version filling the role of the Document, thus licensing distribution
and modification of the Modified Version to whoever possesses a copy
of it.  In addition, you must do these things in the Modified Version:

A. Use in the Title Page (and on the covers, if any) a title distinct
   from that of the Document, and from those of previous versions
   (which should, if there were any, be listed in the History section
   of the Document).  You may use the same title as a previous version
   if the original publisher of that version gives permission.
B. List on the Title Page, as authors, one or more persons or entities
   responsible for authorship of the modifications in the Modified
   Version, together with at least five of the principal authors of the
   Document (all of its principal authors, if it has fewer than five),
   unless they release you from this requirement.
C. State on the Title page the name of the publisher of the
   Modified Version, as the publisher.
D. Preserve all the copyright notices of the Document.
E. Add an appropriate copyright notice for your modifications
   adjacent to the other copyright notices.
F. Include, immediately after the copyright notices, a license notice
   giving the public permission to use the Modified Version under the
   terms of this License, in the form shown in the Addendum below.
G. Preserve in that license notice the full lists of Invariant Sections
   and required Cover Texts given in the Document's license notice.
H. Include an unaltered copy of this License.
I. Preserve the section Entitled "History", Preserve its Title, and add
   to it an item stating at least the title, year, new authors, and
   publisher of the Modified Version as given on the Title Page.  If
   there is no section Entitled "History" in the Document, create one
   stating the title, year, authors, and publisher of the Document as
   given on its Title Page, then add an item describing the Modified
   Version as stated in the previous sentence.
J. Preserve the network location, if any, given in the Document for
   public access to a Transparent copy of the Document, and likewise
   the network locations given in the Document for previous versions
   it was based on.  These may be placed in the "History" section.
   You may omit a network location for a work that was published at
   least four years before the Document itself, or if the original
   publisher of the version it refers to gives permission.
K. For any section Entitled "Acknowledgements" or "Dedications",
   Preserve the Title of the section, and preserve in the section all
   the substance and tone of each of the contributor acknowledgements
   and/or dedications given therein.
L. Preserve all the Invariant Sections of the Document,
   unaltered in their text and in their titles.  Section numbers
   or the equivalent are not considered part of the section titles.
M. Delete any section Entitled "Endorsements".  Such a section
   may not be included in the Modified Version.
N. Do not retitle any existing section to be Entitled "Endorsements"
   or to conflict in title with any Invariant Section.
O. Preserve any Warranty Disclaimers.

If the Modified Version includes new front-matter sections or
appendices that qualify as Secondary Sections and contain no material
copied from the Document, you may at your option designate some or all
of these sections as invariant.  To do this, add their titles to the
list of Invariant Sections in the Modified Version's license notice.
These titles must be distinct from any other section titles.

You may add a section Entitled "Endorsements", provided it contains
nothing but endorsements of your Modified Version by various
parties--for example, statements of peer review or that the text has
been approved by an organization as the authoritative definition of a
standard.

You may add a passage of up to five words as a Front-Cover Text, and a
passage of up to 25 words as a Back-Cover Text, to the end of the list
of Cover Texts in the Modified Version.  Only one passage of
Front-Cover Text and one of Back-Cover Text may be added by (or
through arrangements made by) any one entity.  If the Document already
includes a cover text for the same cover, previously added by you or
by arrangement made by the same entity you are acting on behalf of,
you may not add another; but you may replace the old one, on explicit
permission from the previous publisher that added the old one.

The author(s) and publisher(s) of the Document do not by this License
give permission to use their names for publicity for or to assert or
imply endorsement of any Modified Version.


5. COMBINING DOCUMENTS

You may combine the Document with other documents released under this
License, under the terms defined in section 4 above for modified
versions, provided that you include in the combination all of the
Invariant Sections of all of the original documents, unmodified, and
list them all as Invariant Sections of your combined work in its
license notice, and that you preserve all their Warranty Disclaimers.

The combined work need only contain one copy of this License, and
multiple identical Invariant Sections may be replaced with a single
copy.  If there are multiple Invariant Sections with the same name but
different contents, make the title of each such section unique by
adding at the end of it, in parentheses, the name of the original
author or publisher of that section if known, or else a unique number.
Make the same adjustment to the section titles in the list of
Invariant Sections in the license notice of the combined work.

In the combination, you must combine any sections Entitled "History"
in the various original documents, forming one section Entitled
"History"; likewise combine any sections Entitled "Acknowledgements",
and any sections Entitled "Dedications".  You must delete all sections
Entitled "Endorsements".


6. COLLECTIONS OF DOCUMENTS

You may make a collection consisting of the Document and other
documents released under this License, and replace the individual
copies of this License in the various documents with a single copy
that is included in the collection, provided that you follow the rules
of this License for verbatim copying of each of the documents in all
other respects.

You may extract a single document from such a collection, and
distribute it individually under this License, provided you insert a
copy of this License into the extracted document, and follow this
License in all other respects regarding verbatim copying of that
document.


7. AGGREGATION WITH INDEPENDENT WORKS

A compilation of the Document or its derivatives with other separate
and independent documents or works, in or on a volume of a storage or
distribution medium, is called an "aggregate" if the copyright
resulting from the compilation is not used to limit the legal rights
of the compilation's users beyond what the individual works permit.
When the Document is included in an aggregate, this License does not
apply to the other works in the aggregate which are not themselves
derivative works of the Document.

If the Cover Text requirement of section 3 is applicable to these
copies of the Document, then if the Document is less than one half of
the entire aggregate, the Document's Cover Texts may be placed on
covers that bracket the Document within the aggregate, or the
electronic equivalent of covers if the Document is in electronic form.
Otherwise they must appear on printed covers that bracket the whole
aggregate.


8. TRANSLATION

Translation is considered a kind of modification, so you may
distribute translations of the Document under the terms of section 4.
Replacing Invariant Sections with translations requires special
permission from their copyright holders, but you may include
translations of some or all Invariant Sections in addition to the
original versions of these Invariant Sections.  You may include a
translation of this License, and all the license notices in the
Document, and any Warranty Disclaimers, provided that you also include
the original English version of this License and the original versions
of those notices and disclaimers.  In case of a disagreement between
the translation and the original version of this License or a notice
or disclaimer, the original version will prevail.

If a section in the Document is Entitled "Acknowledgements",
"Dedications", or "History", the requirement (section 4) to Preserve
its Title (section 1) will typically require changing the actual
title.


9. TERMINATION

You may not copy, modify, sublicense, or distribute the Document
except as expressly provided under this License.  Any attempt
otherwise to copy, modify, sublicense, or distribute it is void, and
will automatically terminate your rights under this License.

However, if you cease all violation of this License, then your license
from a particular copyright holder is reinstated (a) provisionally,
unless and until the copyright holder explicitly and finally
terminates your license, and (b) permanently, if the copyright holder
fails to notify you of the violation by some reasonable means prior to
60 days after the cessation.

Moreover, your license from a particular copyright holder is
reinstated permanently if the copyright holder notifies you of the
violation by some reasonable means, this is the first time you have
received notice of violation of this License (for any work) from that
copyright holder, and you cure the violation prior to 30 days after
your receipt of the notice.

Termination of your rights under this section does not terminate the
licenses of parties who have received copies or rights from you under
this License.  If your rights have been terminated and not permanently
reinstated, receipt of a copy of some or all of the same material does
not give you any rights to use it.


10. FUTURE REVISIONS OF THIS LICENSE

The Free Software Foundation may publish new, revised versions of the
GNU Free Documentation License from time to time.  Such new versions
will be similar in spirit to the present version, but may differ in
detail to address new problems or concerns.  See
https://www.gnu.org/licenses/.

Each version of the License is given a distinguishing version number.
If the Document specifies that a particular numbered version of this
License "or any later version" applies to it, you have the option of
following the terms and conditions either of that specified version or
of any later version that has been published (not as a draft) by the
Free Software Foundation.  If the Document does not specify a version
number of this License, you may choose any version ever published (not
as a draft) by the Free Software Foundation.  If the Document
specifies that a proxy can decide which future versions of this
License can be used, that proxy's public statement of acceptance of a
version permanently authorizes you to choose that version for the
Document.

11. RELICENSING

"Massive Multiauthor Collaboration Site" (or "MMC Site") means any
World Wide Web server that publishes copyrightable works and also
provides prominent facilities for anybody to edit those works.  A
public wiki that anybody can edit is an example of such a server.  A
"Massive Multiauthor Collaboration" (or "MMC") contained in the site
means any set of copyrightable works thus published on the MMC site.

"CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
license published by Creative Commons Corporation, a not-for-profit
corporation with a principal place of business in San Francisco,
California, as well as future copyleft versions of that license
published by that same organization.

"Incorporate" means to publish or republish a Document, in whole or in
part, as part of another Document.

An MMC is "eligible for relicensing" if it is licensed under this
License, and if all works that were first published under this License
somewhere other than this MMC, and subsequently incorporated in whole or
in part into the MMC, (1) had no cover texts or invariant sections, and
(2) were thus incorporated prior to November 1, 2008.

The operator of an MMC Site may republish an MMC contained in the site
under CC-BY-SA on the same site at any time before August 1, 2009,
provided the MMC is eligible for relicensing.


ADDENDUM: How to use this License for your documents

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and
license notices just after the title page:

    Copyright (c)  YEAR  YOUR NAME.
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3
    or any later version published by the Free Software Foundation;
    with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
    A copy of the license is included in the section entitled "GNU
    Free Documentation License".

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

    with the Invariant Sections being LIST THEIR TITLES, with the
    Front-Cover Texts being LIST, and with the Back-Cover Texts being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of
free software license, such as the GNU General Public License,
to permit their use in free software.
</pre>
#+end_export

#+html: <!--

* Indices
:PROPERTIES:
:CUSTOM_ID: h:0325b677-0b1b-426e-a5d5-ddc225fde6fa
:END:

** Function index
:PROPERTIES:
:INDEX: fn
:CUSTOM_ID: h:40430725-fd7f-47ac-9a29-913942e84a57
:END:

** Variable index
:PROPERTIES:
:INDEX: vr
:CUSTOM_ID: h:91f3c207-8149-4f9a-89cf-b8726e4e4415
:END:

** Concept index
:PROPERTIES:
:INDEX: cp
:CUSTOM_ID: h:2b11517a-b67f-494f-b111-1c6195e8a2fc
:END:

#+html: -->

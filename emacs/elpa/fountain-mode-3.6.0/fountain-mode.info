This is fountain-mode.info, produced by makeinfo version 6.7 from
fountain-mode.texi.

Copyright (C) 2021 Paul W. Rankin

   The following people contributed to this documentation:
Paul W. Rankin, Kohl Sudduth
INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Fountain Mode: (fountain-mode).	Write screenplays.
END-INFO-DIR-ENTRY


File: fountain-mode.info,  Node: Top,  Next: Overview,  Up: (dir)

Fountain Mode
*************

     n.b.: This manual is a work in progress with many parts still
     missing.  Please consult the help functions within Emacs for
     current documentation.

   Fountain Mode is a screenwriting (and playwriting) program for
GNU Emacs version 24.4 or later.  The Fountain markup format is a
plain-text format designed to be easily readable and editable, portable
and future-proof, and to look as much like a script as possible.

   This is the Fountain Mode Manual updated for version 3.6.

   The public Fountain Mode repository is hosted on GitHub
(https://github.com/rnkn/fountain-mode).

* Menu:

* Overview::			The pitch.
* Installation::		Getting started.
* Script Elements::		The constituent parts of Fountain.
* Outlining::			Organize your script in pieces.
* Navigation::			Fly through your script with ease.
* Syntax Highlighting::		Differentiate all the elements with colors.
* Element Aligning::		WYSIWYG visual indentation of script elements.
* Text Emphasis::		Bold, italic and underline.
* Do What I Mean::		Traditional TAB-style autocompletion.
* Autocompletion::		Completion of frequently used text.
* Scene Numbering::		Adding numbers to a script scenes.
* Pagination::			Counting a navigating script pages.
* Exporting::			Sharing your great writing!
* Contact::		        Help is never far away.
* Indexes::			What are you looking for?


File: fountain-mode.info,  Node: Overview,  Next: Installation,  Prev: Top,  Up: Top

Overview
********

Fountain Mode combines the simplicity of Fountain syntax with the
extensibility of Emacs. Fountain Mode is a major mode for Emacs, which
is to say it is a program that runs inside Emacs -- the extensible,
customizable, free/libre text editor.  It enables the writer to engage
with all aspects of realizing a screenplay -- story development,
outlining, drafting, and rewriting.

   To quickly get up to speed with Fountain syntax, memorize the rules
for the six most used elements of the screenplay format: *note Scene
Headings::, *note Action::, *note Characters::, *note Dialogue::, *note
Parentheticals::, and *note Transitions::.

   Then learn how to outline a script.  *Note Section Headings::.  This
will be familiar for anyone who has used Markdown, as the syntax is the
same.  Sections allow you to easily show or hide and reorder large parts
of a script.

   There are additional Fountain syntax elements to allow for
brainstorming, capturing ideas and omitting a part of the script without
deleting it.  *Note Synopses::, *note Notes::, and *note Comments::.
These elements are not usually included in the formatted output.

   All of Fountain Mode's capabilities are accessible via the menu, and
all customization is performed via the 'Fountain' option group.  *Note
(emacs) Customization Groups::.


File: fountain-mode.info,  Node: Installation,  Next: Script Elements,  Prev: Overview,  Up: Top

Installation
************

The latest stable release of Fountain Mode is available as an Emacs
package via MELPA-stable (https://stable.melpa.org/#/fountain-mode).

   In order to install packages via MELPA-stable, you'll first need to
add it to your package archives:

     M-x customize-option RET package-archives RET

   Insert an entry named 'melpa-stable' with the URL
'https://stable.melpa.org/packages/'

   You can then find the latest stable version of 'fountain-mode' in the
list returned by:

     M-x list-packages RET

   If you like to live on the bleeding edge and prefer the latest but
perhaps unstable version, do the above using MELPA
(https://melpa.org/#/fountain-mode).  Unless you are already familiar
with debugging Elisp code, it is strongly encouraged to use the stable
version.

* Menu:

* Requirements::		Do you have what it takes?
* Advanced Installation::	For the pros.


File: fountain-mode.info,  Node: Requirements,  Next: Advanced Installation,  Up: Installation

Requirements
============

Fountain Mode is compatible with Emacs version 24.4 and later.

   For Emacs versions older than 26.1, there is a bug in the 'outline'
library.  This will be automatically patched provided
'fountain-patch-emacs-bugs' is non-nil and Emacs is installed with its
Elisp source files.

   For Emacs versions older than 25.1, the 'seq' library will need to be
installed; if you install using the Emacs package management system,
'seq' will be installed automatically.


File: fountain-mode.info,  Node: Advanced Installation,  Prev: Requirements,  Up: Installation

Advanced Installation
=====================

Download the latest release
(https://github.com/rnkn/fountain-mode/releases/latest), move this file
into your 'load-path' and add the following to your 'init.el' file:

     (require 'fountain-mode)

   If you wish to contribute to or alter Fountain Mode's code, clone the
repository into your load-path and require as above:

     git clone https://github.com/rnkn/fountain-mode

   *Note (emacs) Lisp Libraries::.


File: fountain-mode.info,  Node: Script Elements,  Next: Outlining,  Prev: Installation,  Up: Top

Script Elements
***************

The central idea of writing a script in Fountain is that you should be
able to just start writing -- as long as your text looks like a script,
you should get correctly formatted output.

     n.b.: Fountain Mode uses the Fountain 1.1 syntax specification.
     While some programs use custom additions to the specification, for
     the greatest cross-compatibility, stick with the 1.1 spec.

* Menu:

* Metadata::			Key-value info at the top of your script.
* Section Headings::		Outline your script with '#'-prefixed headings.
* Scene Headings::		Lines beginning with 'INT', 'EXT', etc.
* Action::			Anything that's not another element.
* Characters::			Names are in ALL-CAPS.
* Dialogue::			Text following character elements.
* Parentheticals::		Text inside (parens) within dialogue.
* Transitions::			Uppercase lines ending in 'TO:'.
* Notes::			Text within '[[' double brackets ']]'.
* Synopses::			Lines beginning with '='.
* Center Text::			Put your titles '>' between these '<'.
* Comments::			C-style multi-line comments (aka "Boneyard").


File: fountain-mode.info,  Node: Metadata,  Next: Section Headings,  Up: Script Elements

Metadata
========

A Fountain script usually starts with some metadata stating the basic
information about the script.  These are colon-separated key-value pairs
at the start of a file:

     key: value

   Other Fountain-compatible programs may refer to this as "title page"
info, but metadata can store information not related to or present on
the title page.

   Calling 'auto-insert' will guide you through adding the most common
Fountain metadata, prompting with likely defaults:

   * 'title' is pretty obvious, and will default to base-name of the
     current buffer.
   * 'credit' is not actually your name, but the type of credit given to
     the 'author', e.g.  'written by' or 'screenplay by'.
   * 'author' is you or your writing team, and defaults to the value of
     variable 'user-full-name'.
   * 'format' will override the value of
     'fountain-default-script-format' for the current script.  Accepted
     values are: 'screenplay', 'teleplay', 'stageplay'.
   * 'date' defaults to the current date in your locale's "preferred"
     format.
   * 'source', for if you're writing an adaptation.
   * 'contact' is useful if the writer wants readers to ever get in
     touch to make the film/play!

   All metadata keys can take either a single line of input following
the colon, or a newline followed multiple lines indented with
whitespace:

     author:
     	Mary Maryland
     	and
     	Alan Smithee

   Metadata keys are case-insensitive, e.g.  'Title' is the same as
'title'.


File: fountain-mode.info,  Node: Section Headings,  Next: Scene Headings,  Prev: Metadata,  Up: Script Elements

Section Headings
================

Section headings are lines beginning with '#' (number sign).  There are
five levels of section headings, with additional '#' characters demoting
the outline level of a heading.

     # Top-Level Heading

     ## Sub-Heading

     ### Sub-Sub-Heading

   *Note Outlining::.


File: fountain-mode.info,  Node: Scene Headings,  Next: Action,  Prev: Section Headings,  Up: Script Elements

Scene Headings
==============

A scene begins with a scene heading.

   Scene headings begin with a prefix, specified in
'fountain-scene-heading-prefix-list', which defaults to:

     INT, EXT, EST, INT./EXT., INT/EXT, I/E

   Each prefix may be followed by a dot and/or a space, so the following
are equivalent:

     INT HOUSE - DAY

     INT. HOUSE - DAY

 -- User Option: fountain-scene-heading-prefix-list
     This options allows setting your own scene heading prefixes.  These
     entries are case-insensitive.

 -- User Option: fountain-scene-heading-suffix-separator
     This option allows setting the separator (a regular expression)
     between the scene location and time of day.  The default ' --? '
     allows either one or two dashes.

   *Note Scene Heading Completion::.


File: fountain-mode.info,  Node: Action,  Next: Characters,  Prev: Scene Headings,  Up: Script Elements

Action
======

Action is the easiest Fountain element -- anything that isn't parsed as
another element is considered action.

   Sometimes you may write some action that will be unintentionally
parsed as dialogue, for example:

     Jack examines his shopping list...

     BLACK SHIRT
     BLACK PANTS
     EXPLOSIVES
     MAP

   Here 'BLACK SHIRT' would be parsed as a character, who then shouts
"BLACK PANTS!..." We don't want that.  To prevent this, prefix the first
line with '!' (exclamation mark).  This is known as a "forced" element.

     !BLACK SHIRT
     BLACK PANTS
     EXPLOSIVES
     MAP


File: fountain-mode.info,  Node: Characters,  Next: Dialogue,  Prev: Action,  Up: Script Elements

Characters
==========

To write a character name to cue some dialogue, type the name in
uppercase (ALL-CAPS).

     JOLENE

   The next line will be parsed as dialogue.

   Sometimes you might want to include lowercase letters in a character
name.  To force a line as a character name, prefix it with '@' (at
sign).

     @JOLENE McCLOGGS

   Some Fountain tools may not parse a line as a character name if the
extension contains lowercase letters, requiring the '@' prefix.

     @JOLENE (cont'd)

   If you are just writing the character's name within action, type the
character's name normally.

     Jolene

   If you prefer to write character names within action in uppercase,
that's fine too.  The following will still be parsed as action.

     JOLENE throws the chair at PHILIP.

   *Note Character Name Completion::.


File: fountain-mode.info,  Node: Dialogue,  Next: Parentheticals,  Prev: Characters,  Up: Script Elements

Dialogue
========

Dialogue is any text following *note Characters::.  Just enter a newline
and the next text entered will be parsed as dialogue.

     JOLENE
     Have you seen trouble? I seem to have misplaced it.


File: fountain-mode.info,  Node: Parentheticals,  Next: Transitions,  Prev: Dialogue,  Up: Script Elements

Parentheticals
==============

Anytime the writer types a (parens) inside of a dialogue block, the text
auto-formats into the correct position.

     JOLENE
     (concerned)
     Have you seen trouble? I seem to have misplaced it.

   *Note Autocompletion::.


File: fountain-mode.info,  Node: Transitions,  Next: Notes,  Prev: Parentheticals,  Up: Script Elements

Transitions
===========

Sorry, this node is not yet written.  You can help by submitting a
patch!


File: fountain-mode.info,  Node: Notes,  Next: Synopses,  Prev: Transitions,  Up: Script Elements

Notes
=====

Sorry, this node is not yet written.  You can help by submitting a
patch!


File: fountain-mode.info,  Node: Synopses,  Next: Center Text,  Prev: Notes,  Up: Script Elements

Synopses
========

A synopsis is a handy way to detail what a scene or section is about.  A
synopsis element is simply a line beginning with '=' (equals sign).

     INT. FISHING TRAWLER - DAY
     = The men eat the shark they caught.

   Synopses are not included by most export tools.


File: fountain-mode.info,  Node: Center Text,  Next: Comments,  Prev: Synopses,  Up: Script Elements

Center Text
===========

Sorry, this node is not yet written.  You can help by submitting a
patch!


File: fountain-mode.info,  Node: Comments,  Prev: Center Text,  Up: Script Elements

Comments
========

Sorry, this node is not yet written.  You can help by submitting a
patch!


File: fountain-mode.info,  Node: Outlining,  Next: Navigation,  Prev: Script Elements,  Up: Top

Outlining
*********

There are five levels of section headings.  Scene headings count as the
sixth level headings.

   Cycle an individual subtree visibility with 'TAB'.  Cycle global
outline visibility with 'S-TAB' (shift-tab) or 'C-u TAB'.

   Acts, Sequences, Sections, and Scenes can be given meaningful titles,
giving the writer a bird's eye view of the story and structure at a
moments notice.

   There are many ways to approach writing a screenplay.  Here's one
example of how to use Fountain Mode to Outline a script.

     # Act

     = Synopsis of an Act. A short summary of all the crazy things that
     happen for the next 30-60 pages.

     [[ Act One Note. Useful for character motivation and obstacles. Ideas to
     remember, etc.]]

     ## Sequence

     = Synopsis of a Sequence.

     [[ Sequence Notes. A sequence can be thought of as a series of several
     scenes that make up their own mini-story. ]]

     INT. SCENE - NIGHT

     = Synopsis of a scene.

     [[ Notes to remember for a scene, such as the following:
     - Who wants what from whom?
     - What are they willing to do get what they want?
     - What happens if they don't get it? ]]

   Experimenting with different structures can be accomplished by
folding a Section Heading and moving the section to the new desired
location using keyboard shortcuts.

   Note: all text contained within the fold is carried to the new
location.

   Just as there are many ways to tell a story, there are many ways to
outline a script.  Because Fountain Mode uses plaintext, it does not
force the writer into a single way of working.  Possible structures are
limited only by one's imagination.

 -- Command: fountain-insert-section-heading
     Bound to 'M-RET', insert an empty section heading at the current
     outline level.

 -- Command: fountain-outline-to-indirect-buffer
     If you want to focus on discrete sections of your script you can
     open these in indirect buffers.  Bound to 'C-c C-x b', this command
     clones the current section or scene to indirect buffer.

     *Note (emacs) Indirect Buffers::

 -- User Option: fountain-pop-up-indirect-windows
     Set this to control how indirect buffer windows are opened.
     Sometimes you might want to limit your focus to one sequence, other
     times you might want to look at two scenes in windows side-by-side.
     Set this option to spawn a new window.


File: fountain-mode.info,  Node: Navigation,  Next: Syntax Highlighting,  Prev: Outlining,  Up: Top

Navigation
**********

 -- Command: fountain-outline-next
     Bound to 'C-M-n', move to the next visible heading line.  Also
     'fountain-outline-previous', bound to 'C-M-p'.

 -- Command: fountain-outline-forward
     Bound to 'C-M-f', move forward to the ARG'th subheading at same
     level as this one.  Also 'fountain-outline-backward', bound to
     'C-M-b'.

 -- Command: fountain-outline-beginning
     Bound to 'C-M-a', move to the beginning of the current subtree.

 -- Command: fountain-outline-up
     Bound to 'C-M-u', move to the visible heading line of which the
     present line is a subheading.

 -- Command: fountain-forward-character
     Bound to 'M-n', goto Nth next character (or Nth previous is N is
     negative).  Also 'fountain-backward-character', bound to 'M-p'.

 -- Command: fountain-forward-page
     Bound to 'C-x ]', move to Nth next page (or Nth previous if N is
     negative).  Also 'fountain-backward-page', bound to 'C-x ['.

 -- Command: fountain-goto-scene
     Bound to 'M-g s', move point to Nth scene in current buffer.

 -- Command: fountain-goto-page
     Bound to 'M-g p', move point to Nth page in current buffer.


File: fountain-mode.info,  Node: Syntax Highlighting,  Next: Element Aligning,  Prev: Navigation,  Up: Top

Syntax Highlighting
*******************

Sorry, this node is not yet written.  You can help by submitting a
patch!


File: fountain-mode.info,  Node: Element Aligning,  Next: Text Emphasis,  Prev: Syntax Highlighting,  Up: Top

Element Aligning
****************

Sorry, this node is not yet written.  You can help by submitting a
patch!


File: fountain-mode.info,  Node: Text Emphasis,  Next: Do What I Mean,  Prev: Element Aligning,  Up: Top

Text Emphasis
*************

Text can be underlined, italic, bold, or a combination thereof.

   Underlined text is surrounded by '_underscores_'.

   Italic text is surrounded by '*single asterisks*'

   Bold text is surrounded by '**double asterisks**'

   For the writer pursists who want to work the way our ancestors did on
typewriters, stick to underlining.


File: fountain-mode.info,  Node: Do What I Mean,  Next: Autocompletion,  Prev: Text Emphasis,  Up: Top

Do What I Mean
**************

Like many screenwriting programs, in Fountain Mode pressing 'TAB' will
do the most convenient thing based on context.

   The most common use is triggering autocompletion.  If the point is at
a blank line or the end of a non-blank line, pressing 'TAB' will call
'completion-at-point'.  *Note Autocompletion::.

   In Fountain Mode, 'TAB' is also used to control outline visibility.
So if point is at a scene or section heading, it will cycle visibility
of that scene of section between collapsed and expanded.  To allow for
more control over outline cycling, if 'TAB' is prefixed with 'ARG', call
'fountain-outline-cycle' and pass 'ARG'.  *Note Outlining::.

   'TAB' also helps working with parentheticals.  If the point is at a
blank line within dialogue, it will insert a parenthetical; if the point
is inside an empty parenthetical, it will delete it, or if inside a
non-empty parenthetical, move to a newline.

   If the point is at or inside a note, 'TAB' will cycle visibility of
that note between collapsed and expanded.

   This all might seem complicated, but the idea is by covering all the
cases you don't have to think about it.

 -- Command: fountain-dwim
     This is the command you'll use the most.  Bound to 'TAB', it will
     perform the most convenient action based on the current context.


File: fountain-mode.info,  Node: Autocompletion,  Next: Scene Numbering,  Prev: Do What I Mean,  Up: Top

Autocompletion
**************

One of the nice things about using a dedicated screenwriting program is
that it helps you type less of the things you need to type a lot.
Fountain Mode provides autocompletion for scene headings and character
names.

 -- Command: fountain-completion-update
     This command, bound to 'C-c C-x a' will update the completion
     candidates for current buffer.

* Menu:

* Scene Heading Completion::	Complete times and places.
* Character Name Completion::	For every time someone speaks.


File: fountain-mode.info,  Node: Scene Heading Completion,  Next: Character Name Completion,  Up: Autocompletion

Scene Heading Completion
========================

If the line has a partial scene heading, i.e.  it begins with a prefix
from 'fountain-scene-heading-prefix-list' like so:

     INT. |

   'TAB' will offer completions of previously used locations.

   If the cursor is at the time-of-day, like so:

     INT. SUBMARINE - |

   'TAB' will offer completions from
'fountain-scene-heading-suffix-list'.


File: fountain-mode.info,  Node: Character Name Completion,  Prev: Scene Heading Completion,  Up: Autocompletion

Character Name Completion
=========================

The most basic use of this is when pressing 'TAB' on an empty line.  If
there's an empty line above, this will offer to autocomplete a character
name.  Character names are suggested in the order:

  1. the second-to-last previously speaking character within the current
     scene, i.e.  a character's conversational partner;
  2. the last speaking character within the current scene, i.e.  a
     character continuing speaking;
  3. the remaining characters in the script in order of frequency
     (default if there are not yet speaking characters in the current
     scene).

   'TAB' will also offer character name completion if a line has a
partial character name.

   When the cursor is after a character name and opening parenthesis,
'TAB' will offer completions from 'fountain-character-extension-list'
plus 'fountain-continued-dialog-string'.

     MARY (|

   When the cursor is at an empty line within dialogue, 'TAB' will add
an empty parenthetical.

     MARY
     |
     I'm hungry.

   Likewise, if the cursor is within an empty parenthetical, 'TAB' will
remove the parenthetical.

     MARY
     (|)
     I'm hungry.

   When the cursor is at the end of a non-empty parenthetical, either
inside or outside the closing parenthesis, 'TAB' will move to the
beginning of the next line if the next line is non-empty, otherwise it
will insert a newline.

     MARY
     (angry|)
     I'm hungry.

   When the cursor is at the end of a non-empty line of dialogue, and
the value of 'fountain-dwim-insert-next-character' is non-nil, 'TAB'
will insert an empty line and the second-to-last previously speaking
character.

     MARY
     (angry)
     I'm hungry.|

   The cursor will be left at the end of the next character, allowing
successive presses of 'TAB' to cycling through additional character
completion candidates.

     MARY
     (angry)
     I'm hungry.

     JOHN|


File: fountain-mode.info,  Node: Scene Numbering,  Next: Pagination,  Prev: Autocompletion,  Up: Top

Scene Numbering
***************

Sorry, this node is not yet written.  You can help by submitting a
patch!


File: fountain-mode.info,  Node: Pagination,  Next: Exporting,  Prev: Scene Numbering,  Up: Top

Pagination
**********

Sorry, this node is not yet written.  You can help by submitting a
patch!

 -- Command: fountain-count-pages
     Bound to 'C-c C-p', return both the current page and the total page
     count of the current buffer.


File: fountain-mode.info,  Node: Exporting,  Next: Contact,  Prev: Pagination,  Up: Top

Exporting
*********

Exporting a script in Fountain Mode is handled by one or more external
command-line tools.  Here are some recommended export tools:

   * Afterwriting (https://github.com/ifrost/afterwriting-labs)
   * Wrap (https://github.com/Wraparound/wrap)
   * Screenplain (https://github.com/vilcans/screenplain)
   * Textplay (https://github.com/olivertaylor/Textplay) (1)

   By defining an "export profile", you can easily interface with an
external tool from within Emacs.  A profile is essentially a shell
command, interpolated with a selection of values:

   * '%b' is the 'buffer-file-name'
   * '%B' is the 'buffer-file-name' sans extension
   * '%n' is the 'user-full-name'
   * '%t' is the title (*Note Metadata::.)
   * '%a' is the author (*Note Metadata::.)
   * '%F' is the current date in ISO format
   * '%x' is the current date in your locale's "preferred" format

 -- Command: fountain-export-command
     This command, bound to 'C-c C-e', will prompt for an export
     profile.  The first profile is considered default, so just hitting
     RET is a quick way to export in your usual way.

 -- Command: fountain-export-view
     This command, bound to 'C-c C-v', attempts to open the last
     exported file.  This works by finding the other most recently
     modified file in the current directory matching the current file
     base-name.

   ---------- Footnotes ----------

   (1) Requires PrinceXML (https://www.princexml.com) for PDF export.


File: fountain-mode.info,  Node: Contact,  Next: Indexes,  Prev: Exporting,  Up: Top

Contact
*******

If you run into any trouble using Fountain Mode, or you have a feature
request, you can email the maintainer Paul W. Rankin directly at
<pwr@bydasein.com>.

   For bugs, please ensure you can reproduce with:

     $ emacs -Q -l fountain-mode.el

   You can also try the '#emacs' IRC channel on Libera.chat
(https://libera.chat) where Fountain Mode's maintainer uses the nickname
'rnkn', but please note that most other users on the channel are
unlikely to be screenwriters.

   Known issues are tracked with 'FIXME' comments in the source.

   Financial reward is not a consideration in maintaining Fountain Mode,
but if you would still like to support development, donations are
graciously accepted via GitHub (https://github.com/sponsors/rnkn) or
Liberapay (https://liberapay.com/rnkn/).


File: fountain-mode.info,  Node: Indexes,  Prev: Contact,  Up: Top

Indexes
*******

* Menu:

* Key Index::
* Index of Commands::
* Index of User Options::


File: fountain-mode.info,  Node: Key Index,  Next: Index of Commands,  Up: Indexes

Key Index
=========

 [index ]
* Menu:

* C-c C-e:                               Exporting.            (line 30)
* C-c C-p:                               Pagination.           (line 11)
* C-c C-v:                               Exporting.            (line 35)
* C-c C-x a:                             Autocompletion.       (line 15)
* C-M-a:                                 Navigation.           (line 17)
* C-M-b:                                 Navigation.           (line 14)
* C-M-f:                                 Navigation.           (line 14)
* C-M-n:                                 Navigation.           (line  9)
* C-M-p:                                 Navigation.           (line  9)
* C-M-u:                                 Navigation.           (line 21)
* C-x [:                                 Navigation.           (line 29)
* C-x ]:                                 Navigation.           (line 29)
* M-g p:                                 Navigation.           (line 34)
* M-g s:                                 Navigation.           (line 32)
* M-n:                                   Navigation.           (line 25)
* M-p:                                   Navigation.           (line 25)
* M-RET:                                 Outlining.            (line 59)
* S-TAB:                                 Outlining.            (line  6)
* TAB:                                   Outlining.            (line  6)
* TAB <1>:                               Do What I Mean.       (line  6)
* TAB <2>:                               Scene Heading Completion.
                                                               (line  6)
* TAB <3>:                               Character Name Completion.
                                                               (line  6)


File: fountain-mode.info,  Node: Index of Commands,  Next: Index of User Options,  Prev: Key Index,  Up: Indexes

Index of Commands
=================

 [index ]
* Menu:

* fountain-completion-update:            Autocompletion.       (line 12)
* fountain-count-pages:                  Pagination.           (line  9)
* fountain-dwim:                         Do What I Mean.       (line 30)
* fountain-export-command:               Exporting.            (line 26)
* fountain-export-view:                  Exporting.            (line 31)
* fountain-forward-character:            Navigation.           (line 22)
* fountain-forward-page:                 Navigation.           (line 26)
* fountain-goto-page:                    Navigation.           (line 33)
* fountain-goto-scene:                   Navigation.           (line 30)
* fountain-insert-section-heading:       Outlining.            (line 56)
* fountain-outline-beginning:            Navigation.           (line 15)
* fountain-outline-forward:              Navigation.           (line 10)
* fountain-outline-next:                 Navigation.           (line  6)
* fountain-outline-to-indirect-buffer:   Outlining.            (line 60)
* fountain-outline-up:                   Navigation.           (line 18)


File: fountain-mode.info,  Node: Index of User Options,  Prev: Index of Commands,  Up: Indexes

Index of User Options
=====================

 [index ]
* Menu:

* fountain-pop-up-indirect-windows:      Outlining.            (line 67)
* fountain-scene-heading-prefix-list:    Scene Headings.       (line 20)
* fountain-scene-heading-suffix-separator: Scene Headings.     (line 24)



Tag Table:
Node: Top327
Node: Overview1784
Node: Installation3202
Node: Requirements4202
Node: Advanced Installation4790
Node: Script Elements5350
Node: Metadata6533
Node: Section Headings8129
Node: Scene Headings8553
Node: Action9459
Node: Characters10172
Node: Dialogue11100
Node: Parentheticals11426
Node: Transitions11796
Node: Notes12003
Node: Synopses12192
Node: Center Text12581
Node: Comments12785
Node: Outlining12966
Node: Navigation15474
Node: Syntax Highlighting16744
Node: Element Aligning16970
Node: Text Emphasis17193
Node: Do What I Mean17666
Node: Autocompletion19115
Node: Scene Heading Completion19742
Node: Character Name Completion20259
Node: Scene Numbering22312
Node: Pagination22524
Node: Exporting22863
Ref: Exporting-Footnote-124362
Node: Contact24433
Node: Indexes25329
Node: Key Index25488
Node: Index of Commands27358
Node: Index of User Options28628

End Tag Table


Local Variables:
coding: utf-8
End:

This is corfu.info, produced by makeinfo version 6.7 from corfu.texi.

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Corfu: (corfu).       Completion Overlay Region FUnction.
END-INFO-DIR-ENTRY


File: corfu.info,  Node: Top,  Next: Introduction,  Up: (dir)

corfu.el - Completion Overlay Region FUnction
*********************************************

* Menu:

* Introduction::
* Features::
* Installation and Configuration::
* Key bindings::
* Complementary packages::
* Alternatives::
* Caveats::
* Contributions::

— The Detailed Node Listing —

Installation and Configuration

* Completing with Corfu in the minibuffer::
* Completing with Corfu in the Shell or Eshell::
* TAB-and-Go completion::



File: corfu.info,  Node: Introduction,  Next: Features,  Prev: Top,  Up: Top

1 Introduction
**************

Corfu enhances completion at point with a small completion popup.  The
current candidates are shown in a popup below or above the point.  Corfu
is the minimalistic ‘completion-in-region’ counterpart of the Vertico
(https://github.com/minad/vertico) minibuffer UI.

   Corfu is a small package, which relies on the Emacs completion
facilities and concentrates on providing a polished completion UI.
Completions are either provided by commands like ‘dabbrev-completion’ or
by pluggable backends (‘completion-at-point-functions’, Capfs).  Most
programming language major modes implement a Capf.  Furthermore the
language server packages, Eglot (https://github.com/joaotavora/eglot)
and Lsp-mode (https://github.com/emacs-lsp/lsp-mode), use Capfs which
talk to the LSP server to retrieve the completions.  Corfu does not
include its own completion backends.  The Emacs built-in Capfs and the
Capfs provided by other programming language packages are usually
sufficient.  A few additional Capfs and completion utilities are
provided by the Cape (https://github.com/minad/cape) package.

   *NOTE*: Corfu uses child frames to show the popup.  For now Corfu
falls back to the default setting of the ‘completion-in-region-function’
on non-graphical displays.

   <https://github.com/minad/corfu/blob/screenshots/light.png?raw=true>

   <https://github.com/minad/corfu/blob/screenshots/dark.png?raw=true>


File: corfu.info,  Node: Features,  Next: Installation and Configuration,  Prev: Introduction,  Up: Top

2 Features
**********

   • Timer-based auto-completions (_off_ by default, set ‘corfu-auto’).
   • Popup display with scrollbar indicator and arrow key navigation.
   • The popup can be summoned explicitly by pressing ‘TAB’ at any time.
   • The current candidate is inserted with ‘TAB’ and selected with
     ‘RET’.
   • Candidates sorting by prefix, string length and alphabetically.
   • The selected candidate is previewed (configuable via
     ‘corfu-preview-current’).
   • The selected candidate automatically committed on further input by
     default (configurable via ‘corfu-commit-predicate’).
   • The Orderless (https://github.com/oantolin/orderless) completion
     style is supported.  The filter string can contain arbitrary
     characters, including spaces, if ‘corfu-quit-at-boundary’ is nil.
   • Deferred completion style highlighting for performance.
   • Jumping to location/documentation of current candidate.
   • Show candidate documentation/signature string in the echo area.
   • Deprecated candidates are crossed out in the display.
   • Support for annotations (‘annotation-function’,
     ‘affixation-function’).
   • Icons can be provided by an external package via margin formatter
     functions.


File: corfu.info,  Node: Installation and Configuration,  Next: Key bindings,  Prev: Features,  Up: Top

3 Installation and Configuration
********************************

Corfu is available from GNU ELPA
(http://elpa.gnu.org/packages/corfu.html), such that it can be installed
directly via ‘package-install’.  After installation, the global minor
mode can be enabled with ‘M-x corfu-global-mode’.  In order to configure
Corfu and other packages in your init.el, you may want to use
‘use-package’.

   Corfu is highly flexible and customizable via ‘corfu-*’ customization
variables.  For filtering I recommend to give Orderless completion a
try, which is different from the familiar prefix TAB completion.  Corfu
can be used with the default completion styles, the use of Orderless is
not a necessity.  See also the Corfu Wiki
(https://github.com/minad/corfu/wiki) for additional configuration tips.
In particular the Lsp-mode configuration is documented in the Wiki.

   Here is an example configuration:

     (use-package corfu
       ;; Optional customizations
       ;; :custom
       ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
       ;; (corfu-auto t)                 ;; Enable auto completion
       ;; (corfu-commit-predicate nil)   ;; Do not commit selected candidates on next input
       ;; (corfu-quit-at-boundary t)     ;; Automatically quit at word boundary
       ;; (corfu-quit-no-match t)        ;; Automatically quit if there is no match
       ;; (corfu-preview-current nil)    ;; Disable current candidate preview
       ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
       ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
       ;; (corfu-scroll-margin 5)        ;; Use scroll margin

       ;; You may want to enable Corfu only for certain modes.
       ;; :hook ((prog-mode . corfu-mode)
       ;;        (shell-mode . corfu-mode)
       ;;        (eshell-mode . corfu-mode))

       ;; Recommended: Enable Corfu globally.
       ;; This is recommended since dabbrev can be used globally (M-/).
       :init
       (corfu-global-mode))

     ;; Optionally use the `orderless' completion style. See `+orderless-dispatch'
     ;; in the Consult wiki for an advanced Orderless style dispatcher.
     ;; Enable `partial-completion' for files to allow path expansion.
     ;; You may prefer to use `initials' instead of `partial-completion'.
     (use-package orderless
       :init
       ;; Configure a custom style dispatcher (see the Consult wiki)
       ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
       ;;       orderless-component-separator #'orderless-escapable-split-on-space)
       (setq completion-styles '(orderless)
             completion-category-defaults nil
             completion-category-overrides '((file (styles . (partial-completion))))))

     ;; Use dabbrev with Corfu!
     (use-package dabbrev
       ;; Swap M-/ and C-M-/
       :bind (("M-/" . dabbrev-completion)
              ("C-M-/" . dabbrev-expand)))

     ;; A few more useful configurations...
     (use-package emacs
       :init
       ;; TAB cycle if there are only few candidates
       (setq completion-cycle-threshold 3)

       ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
       ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
       ;; (setq read-extended-command-predicate
       ;;       #'command-completion-default-include-p)

       ;; Enable indentation+completion using the TAB key.
       ;; `completion-at-point' is often bound to M-TAB.
       (setq tab-always-indent 'complete))

   See also the Corfu Wiki (https://github.com/minad/corfu/wiki) for
additional configuration tips.  For more general documentation read the
chapter about completion in the Emacs manual
(https://www.gnu.org/software/emacs/manual/html_node/emacs/Completion.html).
If you want to create your own Capfs, you can find documentation about
completion in the Elisp manual
(https://www.gnu.org/software/emacs/manual/html_node/elisp/Completion.html).

* Menu:

* Completing with Corfu in the minibuffer::
* Completing with Corfu in the Shell or Eshell::
* TAB-and-Go completion::


File: corfu.info,  Node: Completing with Corfu in the minibuffer,  Next: Completing with Corfu in the Shell or Eshell,  Up: Installation and Configuration

3.1 Completing with Corfu in the minibuffer
===========================================

Corfu can be used for completion in the minibuffer, since it relies on
child frames to display the candidates.  By default, ‘corfu-global-mode’
does not activate ‘corfu-mode’ in the minibuffer, to avoid interference
with specialised minibuffer completion UIs like Vertico or Mct.  However
you may still want to enable Corfu completion for commands like ‘M-:’
(‘eval-expression’) or ‘M-!’ (‘shell-command’), which read from the
minibuffer.  Activate ‘corfu-mode’ only if ‘completion-at-point’ is
bound in the minibuffer-local keymap to achieve this effect.

     (defun corfu-enable-in-minibuffer ()
       "Enable Corfu in the minibuffer if `completion-at-point' is bound."
       (when (where-is-internal #'completion-at-point (list (current-local-map)))
         ;; (setq-local corfu-auto nil) Enable/disable auto completion
         (corfu-mode 1)))
     (add-hook 'minibuffer-setup-hook #'corfu-enable-in-minibuffer)

   You can also enable Corfu more generally for every minibuffer, as
long as no other completion UI is active.  If you use Mct or Vertico as
your main minibuffer completion UI, the following snippet should yield
the desired result.

     (defun corfu-enable-always-in-minibuffer ()
       "Enable Corfu in the minibuffer if Vertico/Mct are not active."
       (unless (or (bound-and-true-p mct--active)
                   (bound-and-true-p vertico--input))
         ;; (setq-local corfu-auto nil) Enable/disable auto completion
         (corfu-mode 1)))
     (add-hook 'minibuffer-setup-hook #'corfu-enable-always-in-minibuffer 1)


File: corfu.info,  Node: Completing with Corfu in the Shell or Eshell,  Next: TAB-and-Go completion,  Prev: Completing with Corfu in the minibuffer,  Up: Installation and Configuration

3.2 Completing with Corfu in the Shell or Eshell
================================================

When completing in the Eshell I recommend conservative local settings,
no auto completion, quitting at boundary and quitting if there is no
match.

     (add-hook 'eshell-mode-hook
               (lambda ()
                 (setq-local corfu-quit-at-boundary t
                             corfu-quit-no-match t
                             corfu-auto nil)
                 (corfu-mode)))

   Shell completion uses the flexible ‘pcomplete’ mechanism internally,
which allows you to program the completions per shell command.  If you
want to know more, look into this blog post
(https://www.masteringemacs.org/article/pcomplete-context-sensitive-completion-emacs),
which shows how to configure pcomplete for git commands.  I recommend
the pcmpl-args (https://github.com/JonWaltman/pcmpl-args.el) package
which extends Pcomplete with completion support and helpful annotation
support for more commands.  Similar to the Fish shell, pcmpl-args uses
man page parsing and –help output parsing to dynamically generate
completions.  This package brings Eshell completion to another level!

   Unfortunately Pcomplete has a few technical issues, which we can work
around with the Cape (https://github.com/minad/cape) library (Completion
at point extensions).  Cape provides wrappers, which sanitize the
pcomplete function.  Ideally the bugs in pcomplete should be fixed
upstream.  *For now these two advices are strongly recommended to
achieve a sane Eshell experience.*

     ;; Silence the pcomplete capf, no errors or messages!
     (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-silent)

     ;; Ensure that pcomplete does not write to the buffer
     ;; and behaves as a pure `completion-at-point-function'.
     (advice-add 'pcomplete-completions-at-point :around #'cape-wrap-purify)


File: corfu.info,  Node: TAB-and-Go completion,  Prev: Completing with Corfu in the Shell or Eshell,  Up: Installation and Configuration

3.3 TAB-and-Go completion
=========================

You may be interested in configuring Corfu in TAB-and-Go style.
Pressing TAB moves to the next candidate and further input will then
commit the selection.

     (use-package corfu
       ;; TAB-and-Go customizations
       :custom
       (corfu-cycle t)             ;; Enable cycling for `corfu-next/previous'
       (corfu-preselect-first nil) ;; Disable candidate preselection

       ;; Use TAB for cycling, default is `corfu-complete'.
       :bind
       (:map corfu-map
             ("TAB" . corfu-next)
             ([tab] . corfu-next)
             ("S-TAB" . corfu-previous)
             ([backtab] . corfu-previous))

       :init
       (corfu-global-mode))


File: corfu.info,  Node: Key bindings,  Next: Complementary packages,  Prev: Installation and Configuration,  Up: Top

4 Key bindings
**************

Corfu uses a transient keymap ‘corfu-map’ which is active while the
popup is shown.  The keymap defines the following remappings and
bindings:

   • ‘beginning-of-buffer’ -> ‘corfu-first’
   • ‘end-of-buffer’ -> ‘corfu-last’
   • ‘scroll-down-command’ -> ‘corfu-scroll-down’
   • ‘scroll-up-command’ -> ‘corfu-scroll-up’
   • ‘next-line’, ‘down’, ‘M-n’ -> ‘corfu-next’
   • ‘previous-line’, ‘up’, ‘M-p’ -> ‘corfu-previous’
   • ‘completion-at-point’, ‘TAB’ -> ‘corfu-complete’
   • ‘RET’ -> ‘corfu-insert’
   • ‘M-g’ -> ‘corfu-show-location’
   • ‘M-h’ -> ‘corfu-show-documentation’
   • ‘C-g’ -> ‘corfu-quit’
   • ‘keyboard-escape-quit’ -> ‘corfu-reset’


File: corfu.info,  Node: Complementary packages,  Next: Alternatives,  Prev: Key bindings,  Up: Top

5 Complementary packages
************************

Corfu works well together with all packages providing code completion
via the ‘completion-at-point-functions’.  Many modes and packages
already provide a Capf out of the box.  Nevertheless you may want to
look into complementary packages to enhance your setup.

   • Orderless (https://github.com/oantolin/orderless): Cofu supports
     completion styles, including the advanced Orderless
     (https://github.com/oantolin/orderless) completion style, where the
     filtering expressions are separated by spaces (see
     ‘corfu-quit-at-boundary’).

   • Cape (https://github.com/minad/cape): I collect additional Capf
     backends and ‘completion-in-region’ commands in my Cape
     (https://github.com/minad/cape) package.  The package provides a
     file path, a dabbrev completion backend and a backend which allows
     you to enter unicode characters in the form of TeX commands.  Cape
     provides an adapter to reuse Company backends in Corfu.
     Furthermore the function ‘cape-super-capf’ can merge/groups
     multiple Capfs, such that the candidates of multiple Capfs are
     displayed together at the same time.

   • kind-icon (https://github.com/jdtsmith/kind-icon): Icons are
     supported by Corfu via an external package.  For example the
     kind-icon (https://github.com/jdtsmith/kind-icon) package provides
     beautifully styled SVG icons based on monochromatic icon sets like
     material design.

   • corfu-doc (https://github.com/galeo/corfu-doc): The corfu-doc
     package by @galeo allows you to display the candidate documentation
     in a popup next to the Corfu popup, similar to ‘company-quickhelp’.
     _Note that the corfu-doc package is new and still work in
     progress._

   • pcmpl-args (https://github.com/JonWaltman/pcmpl-args.el): Extend
     the Eshell/Shell Pcomplete mechanism with support for many more
     commands.  Similar to the Fish shell, Pcomplete uses man page
     parsing to dynamically retrieve the completions and helpful
     annotations.  This package brings Eshell completions to another
     level!

   • Tempel (https://github.com/minad/tempel): Tiny template/snippet
     package which can be used in conjunction with Corfu.

   • Vertico (https://github.com/minad/vertico): You may also want to
     look into my Vertico (https://github.com/minad/vertico) package.
     Vertico is the minibuffer completion counterpart of Corfu.


File: corfu.info,  Node: Alternatives,  Next: Caveats,  Prev: Complementary packages,  Up: Top

6 Alternatives
**************

   • Company (https://github.com/company-mode/company-mode): Company is
     a widely used and mature completion package, which implements a
     similar interaction model and popup UI as Corfu.  While Corfu
     relies exclusively on the standard Emacs completion API (Capfs),
     Company defines its own API for the backends.  Furthermore Company
     includes its completion backends, which are incompatible with the
     Emacs completion infrastructure.  As a result of this design,
     Company is a more complex package than Corfu.  Company by default
     uses overlays to display the popup in contrast to the child frames
     used by Corfu.  Overall both packages work well.  Company is more
     mature but the integration into Emacs is a bit less tight, since
     for example the ‘completion-at-point’ command (or the
     ‘completion-in-region’ function) does not invoke Company.

   • Mct (https://gitlab.com/protesilaos/mct): Protesilaos’ Minibuffer
     Confines Transcended package supports both minibuffer completion
     and completion in region.  It reuses the default completion UI for
     this purpose and installs a timer which live updates the completion
     buffer.  The main advantage of Mct is that you work with a regular
     Emacs buffer instead of with a popup.  You can take advantage of
     the usual Emacs commands to navigate in the completions buffer.  On
     top, Mct enhances the movement such that you can quickly switch
     between the completions buffer and the minibuffer or the region
     which is being completed.  Mct does not support timer-based auto
     completion, but the integration into Emacs is naturally tight.

   • consult-completion-in-region (https://github.com/minad/consult):
     The Consult package provides the function
     ‘consult-completion-in-region’ which can be set as
     ‘completion-in-region-function’ such that it handles
     ‘completion-at-point’.  The function works by transferring the
     in-buffer completion to the minibuffer.  In the minibuffer, the
     minibuffer completion UI, for example Vertico
     (https://github.com/minad/vertico) takes over.  If you prefer to
     perform all your completions in the minibuffer
     ‘consult-completion-in-region’ is your best option.


File: corfu.info,  Node: Caveats,  Next: Contributions,  Prev: Alternatives,  Up: Top

7 Caveats
*********

Corfu is robust in most scenarios.  There are a few known technical
caveats.

   • Corfu uses child frames to show the popup.  For now Corfu falls
     back to the default setting of the ‘completion-in-region-function’
     on non-graphical displays.  You can use one of the alternatives in
     terminals.

   • Corfu does not sort by history, since ‘completion-at-point’ does
     not maintain a history (See branch ‘history’ for a possible
     solution).


File: corfu.info,  Node: Contributions,  Prev: Caveats,  Up: Top

8 Contributions
***************

Since this package is part of GNU ELPA
(http://elpa.gnu.org/packages/corfu.html) contributions require a
copyright assignment to the FSF.



Tag Table:
Node: Top195
Node: Introduction707
Node: Features2231
Node: Installation and Configuration3635
Node: Completing with Corfu in the minibuffer7891
Node: Completing with Corfu in the Shell or Eshell9724
Node: TAB-and-Go completion11816
Node: Key bindings12679
Node: Complementary packages13631
Node: Alternatives16229
Node: Caveats18662
Node: Contributions19248

End Tag Table


Local Variables:
coding: utf-8
End:

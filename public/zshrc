autoload -Uz compinit                                      # prepare completion
autoload -Uz edit-command-line && zle -N edit-command-line # bound to M-e below
autoload -Uz colors zsh/terminfo                           # symbolic colors
autoload -Uz zmv                                           # file renamer
bindkey -e                                                 # Emacs keybindings
ulimit -c 0                                                # no core dumps
ulimit -s unlimited                                        # no stack limits


### shared POSIX-type shell configuration:

[[ -f ~/.profile ]] && . ~/.profile


### aliases:

alias -g ...='../..'
alias -g ....='../../..'
alias -g .....='../../../..'
alias -g ......='../../../../..'
alias -g .......='../../../../../..'


### shell settings:

REPORTTIME=10                     # command timing

HISTSIZE=500000
HISTFILE="${HOME}/.dotfiles/private/history-files/zsh_history_$(hostname -s)"
SAVEHIST=500000

setopt extended_history           # saves timestamps on history
setopt hist_ignore_space          # do not save command entries which start with a space
setopt hist_expire_dups_first     # expire history duplicates first
setopt hist_reduce_blanks         # remove superfluous whitespace
setopt hist_no_store              # do not save 'history' cmd in history
setopt hist_save_no_dups          # do not save duplicates
setopt hist_verify                # preview history expansions
# setopt inc_append_history       # append each command (c.f. share_history)
setopt share_history              # share commands between shells (c.f. inc_append_history)

setopt auto_cd                    # automatically execute chdir
setopt check_jobs                 # check jobs before exiting the shell
setopt correct                    # correct spelling of commands
setopt no_correct_all             # do not correct spelling of files (annoying)
setopt extended_glob              # globs #, ~, and ^
setopt numeric_glob_sort          # orders files numerically
setopt glob_star_short            # saner recursive glob syntax, e.g. **/*.c
setopt interactive_comments       # allow # comments on command line
setopt long_list_jobs             # use the long format for job listings
setopt no_beep                    # stop beeping
setopt no_hist_beep               # turn off no-history item beeps
setopt no_clobber                 # do not clobber existing files
setopt no_flow_control            # don't use flow control (^S/^Q)
setopt no_hup                     # do not terminate child processes on exit
setopt notify                     # tell me when jobs terminate
setopt prompt_subst               # allow prompt variable substitution
setopt transient_rprompt          # remove previous rprompt after command
setopt auto_menu                  # turn on menu-completion after two tabs
setopt short_loops                # allow one-line 'for' and 'repeat' loops
setopt rc_expand_param            # repeated array expansions
setopt rc_quotes                  # '' means a single quote in single quotes
setopt rm_star_silent             # do not prompt before deleting *


### directory stack customization:

setopt auto_pushd                 # automatic directory stack
setopt pushd_minus                # swap +/- for pushd and popd
setopt pushd_silent               # no output after pushd and popd
setopt pushd_to_home              # pushd with no arguments goes to ~
setopt pushd_ignore_dups          # no duplicates in directory stack


### keyboard settings:
### hint: use ctrl-v in a terminal to print out a key sequence

bindkey '^?' backward-delete-char     # Mac keyboard backspace
bindkey '^P' history-beginning-search-backward
bindkey '^N' history-beginning-search-forward
bindkey '^[[1~' beginning-of-line
bindkey '^[[4~' end-of-line
bindkey '^[[2~' overwrite-mode
bindkey '^[[3~' delete-char
bindkey '^[[6~' end-of-history
bindkey '^[[5~' beginning-of-history
bindkey '^[^I' reverse-menu-complete
bindkey '^[OA' up-line-or-history
bindkey '^[[A' up-line-or-history
bindkey '^[[B' down-line-or-history
bindkey '^[OB' down-line-or-history
bindkey '^[OD' backward-char
bindkey '^[OC' forward-char
bindkey '^[[[A' run-help
bindkey '^[[[B' which-command
bindkey '^[[[C' where-is
bindkey '^@' set-mark-command
bindkey '^[W' copy-region-as-kill
bindkey ' ' magic-space
bindkey '\ee' edit-command-line
bindkey '\C-xu' universal-argument
# not sure which terminal emulator sends this (originally added in 2009):
bindkey '^[^[[D' backward-word
bindkey '^[^[[C' forward-word
# Blink
bindkey '[1;5D' backward-word
bindkey '[1;3D' backward-word
bindkey '[1;5C' forward-word
bindkey '[1;3C' forward-word
# iTerm: xterm emulation
bindkey '[1;5D' backward-word # ctrl
bindkey '[1;9D' backward-word # alt
bindkey '[1;5C' forward-word # ctrl
bindkey '[1;9C' forward-word # alt
# iTerm: Apple Terminal.app emulation
bindkey '[5D' backward-word # ctrl
bindkey 'b' backward-word # alt
bindkey '[5C' forward-word # ctrl
bindkey 'f' forward-word # alt


### command completion

# cache: https://gist.github.com/ctechols/ca1035271ad134841284
if [[ -n ~/.zcompdump(#qN.mh+24) ]]; then
    compinit -i
    touch ~/.zcompdump
else
    compinit -C
fi
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' completions 1
zstyle ':completion:*' expand prefix suffix
zstyle ':completion:*' glob 1
zstyle ':completion:*' group-name ''
zstyle ':completion:*' insert-unambiguous true
zstyle ':completion:*' list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ':completion:*' list-suffixes true
zstyle ':completion:*' matcher-list '' 'r:|[._-]=** r:|=**' 'l:|=* r:|=*' 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' max-errors 1
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' substitute 1
zstyle ':completion:*' use-compctl false
zstyle ':completion:*:default' menu 'select=0'
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:kill:*' force-list always
zstyle ':completion:*:*:kill:*' menu yes select


### colors

if [[ "$terminfo[colors]" -ge 8 ]]; then
    colors
fi
for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
    eval COLOR_BOLD_$color="%{$terminfo[bold]$fg[${(L)color}]%}"
    eval COLOR_$color="%{$fg[${(L)color}]%}"
done
COLOR_NONE="%{$terminfo[sgr0]%}"


### prompt

if command_exists starship; then
    eval "$(starship init zsh)"
else
    # (PROMPT is equivalent to PS1, RPROMPT to RPS1)
    # minimalist prompt:
    #PROMPT='[%m:%4~] '
    RPROMPT='%(?..${COLOR_RED}[%?]${COLOR_NONE})'
    # fancier prompt:
    # vcs_info configuration:
    autoload -Uz vcs_info
    zstyle ':vcs_info:*' formats " %s:${COLOR_GREEN}%b${COLOR_NONE}"
    zstyle ':vcs_info:*' actionformats " %s:${COLOR_GREEN}%b${COLOR_NONE} ${COLOR_RED}%a${COLOR_NONE}"
    zstyle ':vcs_info:(sv[nk]|bzr):*' branchformat "${COLOR_GREEN}%b${COLOR_NONE}:%r"
    function precmd_vcs_info() {
        vcs_info
    }
    PROMPT='%(!.${COLOR_RED}.${COLOR_NONE})[%m:$(shorten_path_disambiguate_keep_last)${vcs_info_msg_0_}${COLOR_MAGENTA}${VIRTUAL_ENV:+ }`basename ${VIRTUAL_ENV:-""}`${COLOR_NONE}]${COLOR_NONE} '
fi


### title bar or status bar

case $TERM in
    xterm*|rxvt*|cygwin)
        function precmd_xterm() {
            print -Pn "\e]0;%n@%m (%y): %5~\a"
        }
        precmd_functions+=( precmd_xterm )
        function preexec_xterm() {
            # print -Pn "\e]0;%n@%m (%y): %5~ [$1]\a"
        }
        preexec_functions+=( preexec_xterm )
        ;;
    screen*|tmux*)
        function precmd_screen() {
            print -Pn "\e]0;%n@%m (%y): %5~\a"
            print -Pn "\ek \e\\"
        }
        precmd_functions+=( precmd_screen )
        function preexec_screen () {
            # print -Pn "\e]0;%n@%m (%y): %5~ [$1]\a"
            print -Pn "\ek${1[(wr)^(*=*|sudo|ssh|-*)]}\e\\"
        }
        preexec_functions+=( preexec_screen )
        ;;
esac


### TRAMP environment settings

if [[ $TERM == "dumb" ]]; then
    PS1="%m%# "
    unsetopt zle
fi


### Turn on fzf (fuzzy finder) integration with custom multi-shell history search:

if command_exists fzf && command_exists fzf-history-all; then
    fzf-history-all-widget () {
        local selected=$(fzf-history-all zsh)
        zle reset-prompt
        LBUFFER+="${selected}${RBUFFER}"
    }
    zle -N fzf-history-all-widget
    bindkey '\er' fzf-history-all-widget
fi


### Turn on Docker autocompletion on Mac with Docker.app.

if [[ "${UNAME}" == "Darwin" && -f "/Applications/Docker.app/Contents/Resources/etc/docker.zsh-completion" ]]; then
    . /Applications/Docker.app/Contents/Resources/etc/docker.zsh-completion
    compinit -i
    compdef _docker docker
fi


### Turn on direnv integration if found.

if command_exists direnv; then
    eval "$(direnv hook zsh)"
fi


### Turn on zoxide (modern autojump replacement) if found.

if command_exists zoxide; then
    export _ZO_DATA_DIR="${HOME}/.local/share/zoxide"
    eval "$(zoxide init zsh)"
fi


### random functions

### utility function for unambiguously shortening the present working directory
function shorten_path_disambiguate_keep_last() {

    # This code transforms the present working directory from
    # /one/two/three/four/five/six to /o/t/t/f/f/six or t/f/f/six, subject to
    # the value of max_entries.
    # Adapted from http://mika.l3ib.org/code/zsh-functions/disambiguate-keeplast

    local max_entries
    max_entries=4

    # short holds the result we want to print
    # full holds the full path up to the current segment
    # part holds the current segment, will get as few characters as
    # possible from cur, which is the full current segment

    local short full part cur
    local first
    local -a split    # the array we loop over

    # We do the (D) expansion right here and
    # handle it later if it had any effect
    split=(${(s:/:)${(Q)${(D)1:-$PWD}}})

    if [[ $split == "" ]]; then
        echo /
        return 0
    fi

    # Handling. Perhaps NOT use (D) above and check after shortening?
    if [[ $split[1] = \~* ]]; then
        # named directory we skip shortening the first element
        # and manually prepend the first element to the return value
        first=$split[1]
        # full should already contain the first
        # component since we don't start there
        full=$~split[1]
        shift split
    fi

    # we don't want to end up with something like ~/
    if (( $#split > 0 )); then
        part=/
    fi

    while (( $#split > ${max_entries} )); do
        first=""
        part=""
        shift split
    done

    for cur ($split[1,-2]) {
        while {
            part+=$cur[1]
            cur=$cur[2,-1]
            local -a glob
            glob=( $full/$part*(-/N) )
            # continue adding if more than one directory matches or
            # the current string is . or ..
            # but stop if there are no more characters to add
            (( $#glob > 1 )) || [[ $part == (.|..) ]] && (( $#cur > 0 ))
        } { # this is a do-while loop
        }
        full+=$part$cur
        short+=$part
        part=/
    }

    echo $first$short$part$split[-1]
    return 0

}


### utility function for converting a video file to a low-quality gif
function video2gif() {
    local in=$1
    local out=$2
    if [[ -z "${in}" || ! -f "${in}" ]]; then
        echo "no input file" 1>&2
        return 1
    fi
    if [[ -z "${out}" || -f "${out}" ]]; then
        echo "bad output file" 1>&2
        return 1
    fi
    local base=${in%.*}
    local palette="${base}.png"
    if [[ -f "${palette}" ]]; then
        echo "palette already exists" 1>&2
        return 1
    fi
    ffmpeg -y -i "${in}" -vf fps=5,scale=500:-1:flags=lanczos,palettegen "${palette}"
    ffmpeg -i "${in}" -i "${palette}" -filter_complex "fps=5,scale=500:-1:flags=lanczos[x];[x][1:v]paletteuse" "${out}"
    rm -f "${palette}"
    return 0
}


### utility function for setting AWS access environment variables
function awscreds() {
    local profile=$1
    if [[ -z "${profile}" ]]; then
        echo "no profile given" 1>&2
        return 1
    fi
    export AWS_ACCESS_KEY_ID=$(aws --profile ${profile} configure get aws_access_key_id)
    export AWS_SECRET_ACCESS_KEY=$(aws --profile ${profile} configure get aws_secret_access_key)
    export AWS_REGION=$(aws --profile ${profile} configure get region)
}

function _awscreds() {
    compadd $(cat ~/.aws/credentials | grep -e '\[.*\]' | perl -pe 's/[\[\]]//g')
}

compdef _awscreds awscreds


### utility function for uploading a file to S3 with a speed limit
function s3cp() {

    # environment check
    if [[ -z $(command -v pv) ]]; then
        echo "no pv found" 1>&2
        return 1
    fi
    if [[ -z $(command -v aws) ]]; then
        echo "no aws found" 1>&2
        return 1
    fi
    if [[ -z "${AWS_ACCESS_KEY_ID}" ]]; then
        echo "set AWS credentials first (maybe use awscreds?)" 1>&2
        return 1
    fi

    # args
    local speed=$1
    local region=$2
    local storage_class=$3
    local src=$4
    local dst_path=$5

    [[ -z "${speed}" ]] && return 1
    [[ -z "${region}" ]] && return 1
    [[ -z "${storage_class}" ]] && return 1
    [[ -z "${src}" ]] && return 1
    [[ -z "${dst_path}" ]] && return 1

    if [[ ! -f "${src}" ]]; then
        echo "source file not found" 1>&2
        return 1
    fi

    local dst
    if [[ "${dst_path}" == */ ]]; then
        dst="${dst_path}${src}"
    else
        dst="${dst_path}/${src}"
    fi

    pv -L ${speed} "${src}" | aws s3 cp --region="${region}" --storage-class="${storage_class}" - "${dst}"

}


### cycle firewall and add mosh-server
function firewall-add-mosh() {
    firewall --setglobalstate off
    firewall --add $(readlinkf $(which mosh-server))
    firewall --unblockapp $(readlinkf $(which mosh-server))
    firewall --setglobalstate on
}


######### yesterday we obeyed kings and bent our necks before emperors #########
#########               but today we kneel only to truth               #########


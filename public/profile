# -*- mode: shell-script; -*-
#
# .profile for POSIX-compatible shells (ash, dash, ksh, sh)


### command finding helper:

command_exists() { command -v "$1" >/dev/null 2>&1; }


### path wrangling:

path_add() {
    path_add_dir="$1"
    path_add_position="${2:-prepend}"
    # Only proceed if directory exists
    if [ ! -d "$path_add_dir" ]; then
        return
    fi
    path_add_NEWPATH=""
    path_add_OLDIFS="$IFS"
    IFS=:

    # Handle prepend vs append
    if [ "$path_add_position" = "append" ]; then
        path_add_NEWPATH=""
    else
        path_add_NEWPATH="$path_add_dir"
    fi

    # Iterate through PATH using POSIX shell constructs
    for p in $PATH; do
        if [ "$p" != "$path_add_dir" ]; then
            # Check if path is already in path_add_NEWPATH
            case ":$path_add_NEWPATH:" in
                *":$p:"*) ;;  # Already in path, skip
                *) path_add_NEWPATH="${path_add_NEWPATH:+$path_add_NEWPATH:}$p" ;;
            esac
        fi
    done

    # Add path_add_dir to the end if appending
    if [ "$path_add_position" = "append" ]; then
        path_add_NEWPATH="${path_add_NEWPATH:+$path_add_NEWPATH:}$path_add_dir"
    fi

    IFS="$path_add_OLDIFS"
    PATH="$path_add_NEWPATH"
}

path_add /usr/sbin
path_add /usr/bin
path_add /usr/local/sbin
path_add /usr/local/bin
path_add /sbin
path_add /bin
path_add /opt/homebrew/sbin
path_add /opt/homebrew/bin
path_add ~/.local/sbin
path_add ~/.local/bin


### enable Nix and Devbox (must happen early for correct path setup):

if command_exists devbox; then
    # This works around the terrible performance of `devbox global shellenv --init-hook`.
    DEVBOX_CACHE_DIR="$HOME/.cache/devbox-shellenv"
    DEVBOX_RAW="$DEVBOX_CACHE_DIR/raw"
    DEVBOX_PROCESSED="$DEVBOX_CACHE_DIR/processed"
    if [ ! -f "${DEVBOX_PROCESSED}" ] || [ -n "$(find "${DEVBOX_PROCESSED}" -mmin +60 2>/dev/null)" ]; then
        # Create cache directory with restrictive permissions
        mkdir -p "$DEVBOX_CACHE_DIR"
        chmod 700 "$DEVBOX_CACHE_DIR"
        # Capture current environment
        env > "$DEVBOX_CACHE_DIR/env_before"
        # Run devbox shellenv and capture its output
        devbox global shellenv --init-hook > "$DEVBOX_RAW"
        chmod 600 "$DEVBOX_RAW"
        # Source the raw output to get new environment
        . "$DEVBOX_RAW"
        env > "$DEVBOX_CACHE_DIR/env_after"
        # Compare environments and only save differences
        {
            echo "# Generated $(date)"
            diff "$DEVBOX_CACHE_DIR/env_before" "$DEVBOX_CACHE_DIR/env_after" | \
                grep '^>' | cut -c 3- | while read line; do
                var_name=${line%%=*}
                var_value=${line#*=}
                echo "export $var_name=\"$var_value\""
            done
        } > "$DEVBOX_PROCESSED"
        chmod 600 "$DEVBOX_PROCESSED"
        # Cleanup intermediate files
        rm "$DEVBOX_CACHE_DIR/env_before" "$DEVBOX_CACHE_DIR/env_after"
    else
        . "$DEVBOX_PROCESSED"
    fi
    export NIX_LOCAL_ROOT="${HOME}/.local/share/devbox/global/default/.devbox/nix/profile/default"
elif [ -e "${HOME}/.nix-profile/etc/profile.d/nix.sh" ]; then
    . "${HOME}/.nix-profile/etc/profile.d/nix.sh"
    export NIX_LOCAL_ROOT="${HOME}/.nix-profile"
fi


### environment variables

export UNAME=$(uname -s)

export DO_NOT_TRACK=1 # https://consoledonottrack.com

if command_exists hx; then
    export EDITOR=hx
else
    export EDITOR=vi
fi

if command_exists less; then
    export PAGER=less
    export LESS="-M -R"
    export LESSHISTFILE=/dev/null
    export LESS_TERMCAP_so=$'\E[1;38;2;0;0;0;48;2;70;130;180m' # highlight "standout" color: "1" bold, "38;2" foreground, "48;2" background
    export LESS_TERMCAP_se=$'\E[39;49m' # standout end
fi

if command_exists moar; then
    export PAGER=moar
    export MOAR=--quit-if-one-screen
fi

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8
export WORDCHARS="*?_-.[]~=&;!#$%^(){}<>"

export LS_COLORS="no=00:fi=00:di=95:ln=01;36:pi=40;33:so=01;35:bd=40;33;01:cd=40;33;01:or=01;05;37;41:mi=01;05;37;41:ex=01;32:*.cmd=01;32:*.exe=01;32:*.com=01;32:*.btm=01;32:*.bat=01;32:*.sh=01;32:*.csh=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tz=01;31:*.rpm=01;31:*.cpio=01;31:*.jpg=01;35:*.gif=01;35:*.bmp=01;35:*.xbm=01;35:*.xpm=01;35:*.png=01;35:*.tif=01;35:"

if [ "${UNAME}" = "Darwin" ]; then
    export XDG_DATA_HOME="${HOME}/.local/share"
    export XDG_CONFIG_HOME="${HOME}/.config"
    export XDG_STATE_HOME="${HOME}/.local/state"
    export XDG_CACHE_HOME="${HOME}/.cache"
fi


### load private configuration:

[ -f ~/.dotfiles/private/shell-profile-private ] && . ~/.dotfiles/private/shell-profile-private


### 24-bit terminal color handling

case $TERM in
    linux | screen*)
        unset COLORTERM
        ;;
    *)
        export COLORTERM=truecolor
        ;;
esac


### Turn on terminal GPG pinentry if on SSH connection or in tmux session:

export GPG_TTY=$(tty)
if [ -n "$SSH_CONNECTION" ] || [ -n "$TMUX" ]; then
    export PINENTRY_USER_DATA="USE_CURSES=1"
fi


### deal with ssh-agent

if [ -z "${SSH_AUTH_SOCK}" ] || [ ! -e "${SSH_AUTH_SOCK}" ]; then
    if [ "${UNAME}" = "Darwin" ]; then
        # launchd manages ssh-agent on Mac, but individual shells can sometimes lose SSH_AUTH_SOCK
        ssh_agent_pid=$(ps uwx | grep "${USER}" | grep ssh-agent | grep -v grep | awk '{print $2}')
        if [ -z "${ssh_agent_pid}" ]; then
            # try to restart ssh-agent
            launchctl start gui/$(id -u)/com.openssh.ssh-agent
            ssh_agent_pid=$(ps uwx | grep "${USER}" | grep ssh-agent | grep -v grep | awk '{print $2}')
        fi
        # launchd may fail to restart the ssh-agent, sigh
        if [ -n "${ssh_agent_pid}" ]; then
            export SSH_AUTH_SOCK=$(lsof -p ${ssh_agent_pid} | grep com.apple.launchd | grep Listeners | awk '{print $8}' | head -1)
        fi
    else
        if command_exists ssh-agent; then
            ssh_agent_sock_file="${HOME}/.ssh/ssh-agent-$(hostname -s)-$(id -un).sock"
            if [ ! -S "${ssh_agent_sock_file}" ]; then
                ssh-agent -s -a "${ssh_agent_sock_file}" > /dev/null
            fi
            export SSH_AUTH_SOCK="${ssh_agent_sock_file}"
        fi
    fi
fi


### aliases

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias .....="cd ../../../../.."
alias ......="cd ../../../../../.."

if ls --color >/dev/null 2>&1; then
    # GNU ls probably available
    alias ls='ls --color --sort=version'
elif command_exists gls && gls --color >/dev/null 2>&1; then
    alias ls='gls --color --sort=version'
fi
alias v="ls -lahF"
alias grep="grep --color"
alias rm="rm -i"
alias cp="cp -p"
if command_exists eza; then
    alias e="eza -l"
fi

if command_exists emacsclient; then
    alias ec="emacsclient -n"
    alias et='emacsclient -a "" -t'
fi

if command_exists mc; then # use Midnight Commander directory-following wrapper
    if [ -f "${NIX_LOCAL_ROOT}/libexec/mc/mc-wrapper.sh" ]; then
        alias mc=". ${NIX_LOCAL_ROOT}/libexec/mc/mc-wrapper.sh"
    fi
fi

tmuxl() {
    if [ -z "$1" ]; then
        echo "session name is required" >&2
        return 1
    fi
    SHELL="$(command -v zsh)"; tmux new -A -s "$1" "${SHELL}" \; set-option default-shell "${SHELL}"
}

[ "${UNAME}" = "Darwin" ] && [ -x "/usr/libexec/ApplicationFirewall/socketfilterfw" ] && \
    alias firewall="sudo /usr/libexec/ApplicationFirewall/socketfilterfw"


### useful functions

# 1. Search for text in files using Ripgrep
# 2. Interactively narrow down the list using fzf
# 3. Open the file in $EDITOR at the given line
# Requires: rg, fzf
rgfzf() {
    rg --color=always --line-number --no-heading --smart-case "${*:-}" |
        fzf --ansi \
            --color "hl:-1:underline,hl+:-1:underline:reverse" \
            --delimiter : \
            --preview-window 'up,60%,border-bottom,+{2}+3/3,~3' \
            --bind "enter:become(${EDITOR} {1} +{2})"
}


# A little helpful fd and fzf integration.
fdfzf() {
    fdfzf_target=$(fd "${*:-}" |
                       fzf --ansi \
                           --color "hl:-1:underline,hl+:-1:underline:reverse")
    if [ -d "${fdfzf_target}" ]; then
        chdir "${fdfzf_target}"
    else
        # insert file path into the command line
        if [ -n "${fdfzf_target}" ]; then
            # Note: print -z is zsh-specific, but this is handled in shell-specific rc files
            print -z "\"${fdfzf_target}\""
        fi
    fi
}


# pskill <process name>
pskill() {
   kill -9 "$(ps -aux | grep "$1" | grep -v grep | awk '{ print $1 }')"
   echo "killed $1"
}

# Search for files containing the given string in the current directory.
findf() {
    find . \( -path '*.svn' -o -path '*.git' \) -prune -o -type f -print0 | \
        xargs -0 grep -I -l -i -e "$1"
}

# Search for files containing the given string in the current directory,
# and print lines with the string.
findl() {
    find . \( -path '*.svn' -o -path '*.git' \) -prune -o -type f -print0 | \
        xargs -0 grep -I -n -i -e "$1"
}

# Semi-portable GNU readlink -f replacement, requires Perl.
readlinkf() {
    perl -MCwd -MFile::Glob -l -e 'print Cwd::abs_path File::Glob::bsd_glob shift' "$1"
}
